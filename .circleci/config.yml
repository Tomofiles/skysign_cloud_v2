version: 2
jobs:
  build_and_test_http_gateway:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/http_gateway
    steps:
      - checkout
      - restore_cache:
          key: http_gateway-{{ checksum "./http_gateway/go.sum" }}
      - run:
          name: http_gateway test
          command: |
            cd ./http_gateway
            go test ./...
      - run:
          name: http_gateway build
          command: |
            cd ./http_gateway
            go build ./...
      - save_cache:
          key: http_gateway-{{ checksum "./http_gateway/go.sum" }}
          paths:
            - /go/pkg/mod

  build_and_test_communication:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/communication
    steps:
      - checkout
      - restore_cache:
          key: communication-{{ checksum "./communication/pom.xml" }}
      - run:
          name: communication dependency
          command: |
            cd ./communication
            mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: communication-{{ checksum "./communication/pom.xml" }}
      - run:
          name: communication protoc
          command: |
            mkdir -p ./communication/src/main/proto
            cd ./skysign-proto
            make cp_communication
      - run:
          name: communication test
          command: |
            cd ./communication
            mvn test
      - run:
          name: communication compile
          command: |
            cd ./communication
            mvn compile

  build_and_test_client:
    docker:
      - image: circleci/node
    working_directory: ~/client
    steps:
      - checkout
      - run:
          name: client env
          command: |
            cd ./client
            echo REACT_APP_CESIUM_KEY=${CESIUM_KEY} > ./.env
      - restore_cache:
          key: client-{{ checksum "./client/package.json" }}
      - run:
          name: client dependency
          command: |
            cd ./client
            npm install
      - save_cache:
          paths:
            - ~/.m2
          key: client-{{ checksum "./client/package.json" }}
      - run:
          name: client test
          command: |
            cd ./client
            npm test
      - run:
          name: client compile
          command: |
            cd ./client
            npm build

  build_and_test_edge:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/edge
    steps:
      - checkout
      - restore_cache:
          key: edge-{{ checksum "./edge/go.sum" }}
      - run:
          name: edge test
          command: |
            cd ./edge
            go test ./...
      - run:
          name: edge build
          command: |
            cd ./edge
            go build ./...
      - save_cache:
          key: edge-{{ checksum "./edge/go.sum" }}
          paths:
            - /go/pkg/mod

  containerize_and_push:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run: 
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      - setup_remote_docker
      - run: 
          name: protoc
          command: |
            mkdir -p ./communication/src/main/proto
            cd ./skysign-proto
            make cp_communication
      - run: 
          name: http_gateway Docker build and push
          command: |
            cd ./http_gateway
            docker build -t http_gateway .
            docker tag http_gateway gcr.io/${GOOGLE_PROJECT_ID}/http_gateway:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/http_gateway:${CIRCLE_SHA1}
      - run: 
          name: communication Docker build and push
          command: |
            cd ./communication
            docker build -t communication .
            docker tag communication gcr.io/${GOOGLE_PROJECT_ID}/communication:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/communication:${CIRCLE_SHA1}
      - run: 
          name: client Docker build and push
          command: |
            cd ./client
            echo REACT_APP_CESIUM_KEY=${CESIUM_KEY} > ./.env
            docker build -t client .
            docker tag client gcr.io/${GOOGLE_PROJECT_ID}/client:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/client:${CIRCLE_SHA1}

  create_pull_request:
    docker:
      - image: circleci/python:3.7.4-stretch
    steps:
      - checkout
      - run:
          name: install hub
          command: |
            curl -sSLf https://github.com/github/hub/releases/download/v2.8.3/hub-linux-amd64-2.8.3.tgz | \
            tar zxf - --strip-components=1 -C /tmp/ && \
            sudo mv /tmp/bin/hub /usr/local/bin/hub
            hub --version
      - run:
          name: install envsubst
          command: |
            sudo apt-get install -qq -y gettext
      - run:
          name: git clone commit push create pull request
          command: |
            git config --global user.name tomofiles-circleci
            git config --global user.email tomofiles-circleci@email.com
            git clone git@github.com:Tomofiles/${SKYSIGN_CONFIG_REPO}.git
            cd ${SKYSIGN_CONFIG_REPO}/
            git checkout -b release-${CIRCLE_SHA1}
            rm -f manifest/*
            envsubst < ../build/deploy/skysign-http-gateway-vehicle.yaml > manifest/skysign-http-gateway-vehicle.yaml
            envsubst < ../build/deploy/skysign-http-gateway-vehicle-backend.yaml > manifest/skysign-http-gateway-vehicle-backend.yaml
            envsubst < ../build/deploy/skysign-http-gateway-user.yaml > manifest/skysign-http-gateway-user.yaml
            envsubst < ../build/deploy/skysign-http-gateway-user-backend.yaml > manifest/skysign-http-gateway-user-backend.yaml
            envsubst < ../build/deploy/skysign-endpoint.yaml > manifest/skysign-endpoint.yaml
            envsubst < ../build/deploy/skysign-communication.yaml > manifest/skysign-communication.yaml
            envsubst < ../build/deploy/skysign-communication-backend.yaml > manifest/skysign-communication-backend.yaml
            envsubst < ../build/deploy/skysign-client.yaml > manifest/skysign-client.yaml
            envsubst < ../build/deploy/skysign-client-backend.yaml > manifest/skysign-client-backend.yaml
            git add .
            git commit -m "release-${CIRCLE_SHA1}"
            git push --set-upstream origin release-${CIRCLE_SHA1}
            hub pull-request -F .github/PULL_REQUEST_TEMPLATE.md -m "[image update] skysign ${CIRCLE_SHA1}"

workflows:
  version: 2
  build_test_push:
    jobs:
      - build_and_test_http_gateway
      - build_and_test_communication
      - build_and_test_client
      - build_and_test_edge
      - containerize_and_push:
          requires:
            - build_and_test_http_gateway
            - build_and_test_communication
            - build_and_test_client
            - build_and_test_edge
      - create_pull_request:
          requires:
            - containerize_and_push
          filters:
            branches:
              only: master
