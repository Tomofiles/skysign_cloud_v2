version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.2
  slack: circleci/slack@3.4.2

slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/status:
          webhook: "${SLACK_WEBHOOK}"
          fail_only: true

jobs:
  build_and_test_http_gateway:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "http-gateway_${CIRCLE_SHA1}"
          checkout: true
          path: ./http-gateway

  build_and_test_helper_api:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "helper-api_${CIRCLE_SHA1}"
          checkout: true
          path: ./helper-api

  build_and_test_remote-communication:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "remote-communication_${CIRCLE_SHA1}"
          checkout: true
          path: ./communication

  build_and_test_fleet-formation:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "fleet-formation_${CIRCLE_SHA1}"
          checkout: true
          path: ./fleet-formation

  build_and_test_flight-operation:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "flight-operation_${CIRCLE_SHA1}"
          checkout: true
          path: ./flight-operation

  build_and_test_collection-analysis:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "collection-analysis_${CIRCLE_SHA1}"
          checkout: true
          path: ./collection-analysis

  build_and_test_client:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "client_${CIRCLE_SHA1}"
          checkout: true
          path: ./client
          extra-build-args: "--build-arg CESIUM_KEY=${CESIUM_KEY}"

  build_and_test_edge:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "edge_${CIRCLE_SHA1}"
          checkout: true
          path: ./edge

  build_and_push_http_gateway:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "http-gateway_${CIRCLE_SHA1}"
          path: ./http-gateway

  build_and_push_helper_api:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "helper-api_${CIRCLE_SHA1}"
          path: ./helper-api

  build_and_push_remote-communication:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "remote-communication_${CIRCLE_SHA1}"
          path: ./communication

  build_and_push_fleet-formation:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "fleet-formation_${CIRCLE_SHA1}"
          path: ./fleet-formation

  build_and_push_flight-operation:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "flight-operation_${CIRCLE_SHA1}"
          path: ./flight-operation

  build_and_push_collection-analysis:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "collection-analysis_${CIRCLE_SHA1}"
          path: ./collection-analysis

  build_and_push_client:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          account-url: AWS_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: ${AWS_RESOURCE_NAME_PREFIX}
          tag: "client_${CIRCLE_SHA1}"
          path: ./client
          extra-build-args: "--build-arg CESIUM_KEY=${CESIUM_KEY}"

  create_pull_request:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - run:
          name: install gh
          command: |
            wget https://github.com/cli/cli/releases/download/v1.13.1/gh_1.13.1_linux_arm64.deb
            sudo dpkg --install ./gh_1.13.1_linux_arm64.deb
      - run:
          name: install envsubst
          command: |
            sudo apt-get install -qq -y gettext
      - run:
          name: git clone commit push create pull request
          command: |
            git config --global user.name tomofiles-circleci
            git config --global user.email tomofiles-circleci@email.com
            git clone git@github.com:Tomofiles/${SKYSIGN_CONFIG_REPO}.git
            cd ${SKYSIGN_CONFIG_REPO}/
            git checkout -b release-${CIRCLE_SHA1}
            rm -f manifest/*
            envsubst < ../build/deploy/skysign-client.yaml > manifest/skysign-client.yaml
            envsubst < ../build/deploy/skysign-collection-analysis-gateway.yaml > manifest/skysign-collection-analysis-gateway.yaml
            envsubst < ../build/deploy/skysign-collection-analysis-service.yaml > manifest/skysign-collection-analysis-service.yaml
            envsubst < ../build/deploy/skysign-db.yaml > manifest/skysign-db.yaml
            envsubst < ../build/deploy/skysign-endpoint.yaml > manifest/skysign-endpoint.yaml
            envsubst < ../build/deploy/skysign-fleet-formation-gateway.yaml > manifest/skysign-fleet-formation-gateway.yaml
            envsubst < ../build/deploy/skysign-fleet-formation-service.yaml > manifest/skysign-fleet-formation-service.yaml
            envsubst < ../build/deploy/skysign-flightoperation-gateway.yaml > manifest/skysign-flightoperation-gateway.yaml
            envsubst < ../build/deploy/skysign-flightoperation-service.yaml > manifest/skysign-flightoperation-service.yaml
            envsubst < ../build/deploy/skysign-helper-gateway.yaml > manifest/skysign-helper-gateway.yaml
            envsubst < ../build/deploy/skysign-helper-service.yaml > manifest/skysign-helper-service.yaml
            envsubst < ../build/deploy/skysign-mq.yaml > manifest/skysign-mq.yaml
            envsubst < ../build/deploy/skysign-remote-communication-gateway.yaml > manifest/skysign-remote-communication-gateway.yaml
            envsubst < ../build/deploy/skysign-remote-communication-service.yaml > manifest/skysign-remote-communication-service.yaml
            git add .
            git commit -m "release-${CIRCLE_SHA1}"
            git push --set-upstream origin release-${CIRCLE_SHA1}
            gh pr create \
              -t "deploy a new image ${APP_NAME}:${CIRCLE_SHA1}" \
              -b "CircleCI auto-generated pull request from https://github.com/${GITHUB_ORG}/${APP_NAME}/commit/${CIRCLE_SHA1}"

  notify-slack:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/status:
          webhook: "${SLACK_WEBHOOK}"

  notify-slack-master:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/status:
          webhook: "${SLACK_WEBHOOK}"

workflows:
  skysign-cicd-workflow:
    jobs:
      - build_and_test_http_gateway:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_helper_api:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_remote-communication:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_fleet-formation:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_flight-operation:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_collection-analysis:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_client:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - build_and_test_edge:
          filters:
            branches:
              ignore: master
          <<: *slack-fail-post-step
      - notify-slack:
          requires:
            - build_and_test_http_gateway
            - build_and_test_helper_api
            - build_and_test_remote-communication
            - build_and_test_fleet-formation
            - build_and_test_flight-operation
            - build_and_test_collection-analysis
            - build_and_test_client
            - build_and_test_edge
          filters:
            branches:
              ignore: master
      - build_and_push_http_gateway:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_helper_api:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_remote-communication:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_fleet-formation:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_flight-operation:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_collection-analysis:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - build_and_push_client:
          filters:
            branches:
              only: master
          <<: *slack-fail-post-step
      - notify-slack-master:
          requires:
            - build_and_push_http_gateway
            - build_and_push_helper_api
            - build_and_push_remote-communication
            - build_and_push_fleet-formation
            - build_and_push_flight-operation
            - build_and_push_collection-analysis
            - build_and_push_client
          filters:
            branches:
              only: master
      - create_pull_request:
          requires:
            - notify-slack-master
          filters:
            branches:
              only: master
