// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MAVSDK-Proto/protos/telemetry/telemetry.proto

package mavsdk_rpc_telemetry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Fix type.
type FixType int32

const (
	FixType_NO_GPS    FixType = 0
	FixType_NO_FIX    FixType = 1
	FixType_FIX_2D    FixType = 2
	FixType_FIX_3D    FixType = 3
	FixType_FIX_DGPS  FixType = 4
	FixType_RTK_FLOAT FixType = 5
	FixType_RTK_FIXED FixType = 6
)

var FixType_name = map[int32]string{
	0: "NO_GPS",
	1: "NO_FIX",
	2: "FIX_2D",
	3: "FIX_3D",
	4: "FIX_DGPS",
	5: "RTK_FLOAT",
	6: "RTK_FIXED",
}

var FixType_value = map[string]int32{
	"NO_GPS":    0,
	"NO_FIX":    1,
	"FIX_2D":    2,
	"FIX_3D":    3,
	"FIX_DGPS":  4,
	"RTK_FLOAT": 5,
	"RTK_FIXED": 6,
}

func (x FixType) String() string {
	return proto.EnumName(FixType_name, int32(x))
}

func (FixType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{0}
}

//
// Flight modes.
//
// For more information about flight modes, check out
// https://docs.px4.io/en/config/flight_mode.html.
type FlightMode int32

const (
	FlightMode_UNKNOWN          FlightMode = 0
	FlightMode_READY            FlightMode = 1
	FlightMode_TAKEOFF          FlightMode = 2
	FlightMode_HOLD             FlightMode = 3
	FlightMode_MISSION          FlightMode = 4
	FlightMode_RETURN_TO_LAUNCH FlightMode = 5
	FlightMode_LAND             FlightMode = 6
	FlightMode_OFFBOARD         FlightMode = 7
	FlightMode_FOLLOW_ME        FlightMode = 8
)

var FlightMode_name = map[int32]string{
	0: "UNKNOWN",
	1: "READY",
	2: "TAKEOFF",
	3: "HOLD",
	4: "MISSION",
	5: "RETURN_TO_LAUNCH",
	6: "LAND",
	7: "OFFBOARD",
	8: "FOLLOW_ME",
}

var FlightMode_value = map[string]int32{
	"UNKNOWN":          0,
	"READY":            1,
	"TAKEOFF":          2,
	"HOLD":             3,
	"MISSION":          4,
	"RETURN_TO_LAUNCH": 5,
	"LAND":             6,
	"OFFBOARD":         7,
	"FOLLOW_ME":        8,
}

func (x FlightMode) String() string {
	return proto.EnumName(FlightMode_name, int32(x))
}

func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{1}
}

// Landed State enumeration
type LandedState int32

const (
	LandedState_LANDED_STATE_UNKNOWN    LandedState = 0
	LandedState_LANDED_STATE_ON_GROUND  LandedState = 1
	LandedState_LANDED_STATE_IN_AIR     LandedState = 2
	LandedState_LANDED_STATE_TAKING_OFF LandedState = 3
	LandedState_LANDED_STATE_LANDING    LandedState = 4
)

var LandedState_name = map[int32]string{
	0: "LANDED_STATE_UNKNOWN",
	1: "LANDED_STATE_ON_GROUND",
	2: "LANDED_STATE_IN_AIR",
	3: "LANDED_STATE_TAKING_OFF",
	4: "LANDED_STATE_LANDING",
}

var LandedState_value = map[string]int32{
	"LANDED_STATE_UNKNOWN":    0,
	"LANDED_STATE_ON_GROUND":  1,
	"LANDED_STATE_IN_AIR":     2,
	"LANDED_STATE_TAKING_OFF": 3,
	"LANDED_STATE_LANDING":    4,
}

func (x LandedState) String() string {
	return proto.EnumName(LandedState_name, int32(x))
}

func (LandedState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{2}
}

// Status types.
type StatusText_StatusType int32

const (
	StatusText_INFO     StatusText_StatusType = 0
	StatusText_WARNING  StatusText_StatusType = 1
	StatusText_CRITICAL StatusText_StatusType = 2
)

var StatusText_StatusType_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "CRITICAL",
}

var StatusText_StatusType_value = map[string]int32{
	"INFO":     0,
	"WARNING":  1,
	"CRITICAL": 2,
}

func (x StatusText_StatusType) String() string {
	return proto.EnumName(StatusText_StatusType_name, int32(x))
}

func (StatusText_StatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{49, 0}
}

// Mavlink frame id
type Odometry_MavFrame int32

const (
	Odometry_UNDEF      Odometry_MavFrame = 0
	Odometry_BODY_NED   Odometry_MavFrame = 8
	Odometry_VISION_NED Odometry_MavFrame = 16
	Odometry_ESTIM_NED  Odometry_MavFrame = 18
)

var Odometry_MavFrame_name = map[int32]string{
	0:  "UNDEF",
	8:  "BODY_NED",
	16: "VISION_NED",
	18: "ESTIM_NED",
}

var Odometry_MavFrame_value = map[string]int32{
	"UNDEF":      0,
	"BODY_NED":   8,
	"VISION_NED": 16,
	"ESTIM_NED":  18,
}

func (x Odometry_MavFrame) String() string {
	return proto.EnumName(Odometry_MavFrame_name, int32(x))
}

func (Odometry_MavFrame) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{52, 0}
}

type SubscribePositionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribePositionRequest) Reset()         { *m = SubscribePositionRequest{} }
func (m *SubscribePositionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribePositionRequest) ProtoMessage()    {}
func (*SubscribePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{0}
}

func (m *SubscribePositionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribePositionRequest.Unmarshal(m, b)
}
func (m *SubscribePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribePositionRequest.Marshal(b, m, deterministic)
}
func (m *SubscribePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribePositionRequest.Merge(m, src)
}
func (m *SubscribePositionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribePositionRequest.Size(m)
}
func (m *SubscribePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribePositionRequest proto.InternalMessageInfo

type PositionResponse struct {
	Position             *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PositionResponse) Reset()         { *m = PositionResponse{} }
func (m *PositionResponse) String() string { return proto.CompactTextString(m) }
func (*PositionResponse) ProtoMessage()    {}
func (*PositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{1}
}

func (m *PositionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionResponse.Unmarshal(m, b)
}
func (m *PositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionResponse.Marshal(b, m, deterministic)
}
func (m *PositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResponse.Merge(m, src)
}
func (m *PositionResponse) XXX_Size() int {
	return xxx_messageInfo_PositionResponse.Size(m)
}
func (m *PositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResponse proto.InternalMessageInfo

func (m *PositionResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type SubscribeHomeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHomeRequest) Reset()         { *m = SubscribeHomeRequest{} }
func (m *SubscribeHomeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeHomeRequest) ProtoMessage()    {}
func (*SubscribeHomeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{2}
}

func (m *SubscribeHomeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeHomeRequest.Unmarshal(m, b)
}
func (m *SubscribeHomeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeHomeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeHomeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeRequest.Merge(m, src)
}
func (m *SubscribeHomeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeHomeRequest.Size(m)
}
func (m *SubscribeHomeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeRequest proto.InternalMessageInfo

type HomeResponse struct {
	Home                 *Position `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HomeResponse) Reset()         { *m = HomeResponse{} }
func (m *HomeResponse) String() string { return proto.CompactTextString(m) }
func (*HomeResponse) ProtoMessage()    {}
func (*HomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{3}
}

func (m *HomeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeResponse.Unmarshal(m, b)
}
func (m *HomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeResponse.Marshal(b, m, deterministic)
}
func (m *HomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeResponse.Merge(m, src)
}
func (m *HomeResponse) XXX_Size() int {
	return xxx_messageInfo_HomeResponse.Size(m)
}
func (m *HomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HomeResponse proto.InternalMessageInfo

func (m *HomeResponse) GetHome() *Position {
	if m != nil {
		return m.Home
	}
	return nil
}

type SubscribeInAirRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeInAirRequest) Reset()         { *m = SubscribeInAirRequest{} }
func (m *SubscribeInAirRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeInAirRequest) ProtoMessage()    {}
func (*SubscribeInAirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{4}
}

func (m *SubscribeInAirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeInAirRequest.Unmarshal(m, b)
}
func (m *SubscribeInAirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeInAirRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeInAirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeInAirRequest.Merge(m, src)
}
func (m *SubscribeInAirRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeInAirRequest.Size(m)
}
func (m *SubscribeInAirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeInAirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeInAirRequest proto.InternalMessageInfo

type InAirResponse struct {
	IsInAir              bool     `protobuf:"varint,1,opt,name=is_in_air,json=isInAir,proto3" json:"is_in_air,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InAirResponse) Reset()         { *m = InAirResponse{} }
func (m *InAirResponse) String() string { return proto.CompactTextString(m) }
func (*InAirResponse) ProtoMessage()    {}
func (*InAirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{5}
}

func (m *InAirResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InAirResponse.Unmarshal(m, b)
}
func (m *InAirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InAirResponse.Marshal(b, m, deterministic)
}
func (m *InAirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InAirResponse.Merge(m, src)
}
func (m *InAirResponse) XXX_Size() int {
	return xxx_messageInfo_InAirResponse.Size(m)
}
func (m *InAirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InAirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InAirResponse proto.InternalMessageInfo

func (m *InAirResponse) GetIsInAir() bool {
	if m != nil {
		return m.IsInAir
	}
	return false
}

type SubscribeLandedStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeLandedStateRequest) Reset()         { *m = SubscribeLandedStateRequest{} }
func (m *SubscribeLandedStateRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeLandedStateRequest) ProtoMessage()    {}
func (*SubscribeLandedStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{6}
}

func (m *SubscribeLandedStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeLandedStateRequest.Unmarshal(m, b)
}
func (m *SubscribeLandedStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeLandedStateRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeLandedStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeLandedStateRequest.Merge(m, src)
}
func (m *SubscribeLandedStateRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeLandedStateRequest.Size(m)
}
func (m *SubscribeLandedStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeLandedStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeLandedStateRequest proto.InternalMessageInfo

type LandedStateResponse struct {
	LandedState          LandedState `protobuf:"varint,1,opt,name=landed_state,json=landedState,proto3,enum=mavsdk.rpc.telemetry.LandedState" json:"landed_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LandedStateResponse) Reset()         { *m = LandedStateResponse{} }
func (m *LandedStateResponse) String() string { return proto.CompactTextString(m) }
func (*LandedStateResponse) ProtoMessage()    {}
func (*LandedStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{7}
}

func (m *LandedStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LandedStateResponse.Unmarshal(m, b)
}
func (m *LandedStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LandedStateResponse.Marshal(b, m, deterministic)
}
func (m *LandedStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandedStateResponse.Merge(m, src)
}
func (m *LandedStateResponse) XXX_Size() int {
	return xxx_messageInfo_LandedStateResponse.Size(m)
}
func (m *LandedStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LandedStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LandedStateResponse proto.InternalMessageInfo

func (m *LandedStateResponse) GetLandedState() LandedState {
	if m != nil {
		return m.LandedState
	}
	return LandedState_LANDED_STATE_UNKNOWN
}

type SubscribeArmedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeArmedRequest) Reset()         { *m = SubscribeArmedRequest{} }
func (m *SubscribeArmedRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeArmedRequest) ProtoMessage()    {}
func (*SubscribeArmedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{8}
}

func (m *SubscribeArmedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeArmedRequest.Unmarshal(m, b)
}
func (m *SubscribeArmedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeArmedRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeArmedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeArmedRequest.Merge(m, src)
}
func (m *SubscribeArmedRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeArmedRequest.Size(m)
}
func (m *SubscribeArmedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeArmedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeArmedRequest proto.InternalMessageInfo

type ArmedResponse struct {
	IsArmed              bool     `protobuf:"varint,1,opt,name=is_armed,json=isArmed,proto3" json:"is_armed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArmedResponse) Reset()         { *m = ArmedResponse{} }
func (m *ArmedResponse) String() string { return proto.CompactTextString(m) }
func (*ArmedResponse) ProtoMessage()    {}
func (*ArmedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{9}
}

func (m *ArmedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArmedResponse.Unmarshal(m, b)
}
func (m *ArmedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArmedResponse.Marshal(b, m, deterministic)
}
func (m *ArmedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArmedResponse.Merge(m, src)
}
func (m *ArmedResponse) XXX_Size() int {
	return xxx_messageInfo_ArmedResponse.Size(m)
}
func (m *ArmedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArmedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArmedResponse proto.InternalMessageInfo

func (m *ArmedResponse) GetIsArmed() bool {
	if m != nil {
		return m.IsArmed
	}
	return false
}

type SubscribeAttitudeQuaternionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeAttitudeQuaternionRequest) Reset()         { *m = SubscribeAttitudeQuaternionRequest{} }
func (m *SubscribeAttitudeQuaternionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeAttitudeQuaternionRequest) ProtoMessage()    {}
func (*SubscribeAttitudeQuaternionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{10}
}

func (m *SubscribeAttitudeQuaternionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeAttitudeQuaternionRequest.Unmarshal(m, b)
}
func (m *SubscribeAttitudeQuaternionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeAttitudeQuaternionRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeAttitudeQuaternionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeAttitudeQuaternionRequest.Merge(m, src)
}
func (m *SubscribeAttitudeQuaternionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeAttitudeQuaternionRequest.Size(m)
}
func (m *SubscribeAttitudeQuaternionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeAttitudeQuaternionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeAttitudeQuaternionRequest proto.InternalMessageInfo

type AttitudeQuaternionResponse struct {
	AttitudeQuaternion   *Quaternion `protobuf:"bytes,1,opt,name=attitude_quaternion,json=attitudeQuaternion,proto3" json:"attitude_quaternion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AttitudeQuaternionResponse) Reset()         { *m = AttitudeQuaternionResponse{} }
func (m *AttitudeQuaternionResponse) String() string { return proto.CompactTextString(m) }
func (*AttitudeQuaternionResponse) ProtoMessage()    {}
func (*AttitudeQuaternionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{11}
}

func (m *AttitudeQuaternionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttitudeQuaternionResponse.Unmarshal(m, b)
}
func (m *AttitudeQuaternionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttitudeQuaternionResponse.Marshal(b, m, deterministic)
}
func (m *AttitudeQuaternionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttitudeQuaternionResponse.Merge(m, src)
}
func (m *AttitudeQuaternionResponse) XXX_Size() int {
	return xxx_messageInfo_AttitudeQuaternionResponse.Size(m)
}
func (m *AttitudeQuaternionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttitudeQuaternionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttitudeQuaternionResponse proto.InternalMessageInfo

func (m *AttitudeQuaternionResponse) GetAttitudeQuaternion() *Quaternion {
	if m != nil {
		return m.AttitudeQuaternion
	}
	return nil
}

type SubscribeAttitudeEulerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeAttitudeEulerRequest) Reset()         { *m = SubscribeAttitudeEulerRequest{} }
func (m *SubscribeAttitudeEulerRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeAttitudeEulerRequest) ProtoMessage()    {}
func (*SubscribeAttitudeEulerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{12}
}

func (m *SubscribeAttitudeEulerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeAttitudeEulerRequest.Unmarshal(m, b)
}
func (m *SubscribeAttitudeEulerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeAttitudeEulerRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeAttitudeEulerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeAttitudeEulerRequest.Merge(m, src)
}
func (m *SubscribeAttitudeEulerRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeAttitudeEulerRequest.Size(m)
}
func (m *SubscribeAttitudeEulerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeAttitudeEulerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeAttitudeEulerRequest proto.InternalMessageInfo

type AttitudeEulerResponse struct {
	AttitudeEuler        *EulerAngle `protobuf:"bytes,1,opt,name=attitude_euler,json=attitudeEuler,proto3" json:"attitude_euler,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AttitudeEulerResponse) Reset()         { *m = AttitudeEulerResponse{} }
func (m *AttitudeEulerResponse) String() string { return proto.CompactTextString(m) }
func (*AttitudeEulerResponse) ProtoMessage()    {}
func (*AttitudeEulerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{13}
}

func (m *AttitudeEulerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttitudeEulerResponse.Unmarshal(m, b)
}
func (m *AttitudeEulerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttitudeEulerResponse.Marshal(b, m, deterministic)
}
func (m *AttitudeEulerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttitudeEulerResponse.Merge(m, src)
}
func (m *AttitudeEulerResponse) XXX_Size() int {
	return xxx_messageInfo_AttitudeEulerResponse.Size(m)
}
func (m *AttitudeEulerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttitudeEulerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttitudeEulerResponse proto.InternalMessageInfo

func (m *AttitudeEulerResponse) GetAttitudeEuler() *EulerAngle {
	if m != nil {
		return m.AttitudeEuler
	}
	return nil
}

type SubscribeAttitudeAngularVelocityBodyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeAttitudeAngularVelocityBodyRequest) Reset() {
	*m = SubscribeAttitudeAngularVelocityBodyRequest{}
}
func (m *SubscribeAttitudeAngularVelocityBodyRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SubscribeAttitudeAngularVelocityBodyRequest) ProtoMessage() {}
func (*SubscribeAttitudeAngularVelocityBodyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{14}
}

func (m *SubscribeAttitudeAngularVelocityBodyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest.Unmarshal(m, b)
}
func (m *SubscribeAttitudeAngularVelocityBodyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeAttitudeAngularVelocityBodyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest.Merge(m, src)
}
func (m *SubscribeAttitudeAngularVelocityBodyRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest.Size(m)
}
func (m *SubscribeAttitudeAngularVelocityBodyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeAttitudeAngularVelocityBodyRequest proto.InternalMessageInfo

type AttitudeAngularVelocityBodyResponse struct {
	AttitudeAngularVelocityBody *AngularVelocityBody `protobuf:"bytes,1,opt,name=attitude_angular_velocity_body,json=attitudeAngularVelocityBody,proto3" json:"attitude_angular_velocity_body,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *AttitudeAngularVelocityBodyResponse) Reset()         { *m = AttitudeAngularVelocityBodyResponse{} }
func (m *AttitudeAngularVelocityBodyResponse) String() string { return proto.CompactTextString(m) }
func (*AttitudeAngularVelocityBodyResponse) ProtoMessage()    {}
func (*AttitudeAngularVelocityBodyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{15}
}

func (m *AttitudeAngularVelocityBodyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttitudeAngularVelocityBodyResponse.Unmarshal(m, b)
}
func (m *AttitudeAngularVelocityBodyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttitudeAngularVelocityBodyResponse.Marshal(b, m, deterministic)
}
func (m *AttitudeAngularVelocityBodyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttitudeAngularVelocityBodyResponse.Merge(m, src)
}
func (m *AttitudeAngularVelocityBodyResponse) XXX_Size() int {
	return xxx_messageInfo_AttitudeAngularVelocityBodyResponse.Size(m)
}
func (m *AttitudeAngularVelocityBodyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttitudeAngularVelocityBodyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttitudeAngularVelocityBodyResponse proto.InternalMessageInfo

func (m *AttitudeAngularVelocityBodyResponse) GetAttitudeAngularVelocityBody() *AngularVelocityBody {
	if m != nil {
		return m.AttitudeAngularVelocityBody
	}
	return nil
}

type SubscribeCameraAttitudeQuaternionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCameraAttitudeQuaternionRequest) Reset() {
	*m = SubscribeCameraAttitudeQuaternionRequest{}
}
func (m *SubscribeCameraAttitudeQuaternionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCameraAttitudeQuaternionRequest) ProtoMessage()    {}
func (*SubscribeCameraAttitudeQuaternionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{16}
}

func (m *SubscribeCameraAttitudeQuaternionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest.Unmarshal(m, b)
}
func (m *SubscribeCameraAttitudeQuaternionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCameraAttitudeQuaternionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest.Merge(m, src)
}
func (m *SubscribeCameraAttitudeQuaternionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest.Size(m)
}
func (m *SubscribeCameraAttitudeQuaternionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCameraAttitudeQuaternionRequest proto.InternalMessageInfo

type CameraAttitudeQuaternionResponse struct {
	AttitudeQuaternion   *Quaternion `protobuf:"bytes,1,opt,name=attitude_quaternion,json=attitudeQuaternion,proto3" json:"attitude_quaternion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CameraAttitudeQuaternionResponse) Reset()         { *m = CameraAttitudeQuaternionResponse{} }
func (m *CameraAttitudeQuaternionResponse) String() string { return proto.CompactTextString(m) }
func (*CameraAttitudeQuaternionResponse) ProtoMessage()    {}
func (*CameraAttitudeQuaternionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{17}
}

func (m *CameraAttitudeQuaternionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraAttitudeQuaternionResponse.Unmarshal(m, b)
}
func (m *CameraAttitudeQuaternionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraAttitudeQuaternionResponse.Marshal(b, m, deterministic)
}
func (m *CameraAttitudeQuaternionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraAttitudeQuaternionResponse.Merge(m, src)
}
func (m *CameraAttitudeQuaternionResponse) XXX_Size() int {
	return xxx_messageInfo_CameraAttitudeQuaternionResponse.Size(m)
}
func (m *CameraAttitudeQuaternionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraAttitudeQuaternionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CameraAttitudeQuaternionResponse proto.InternalMessageInfo

func (m *CameraAttitudeQuaternionResponse) GetAttitudeQuaternion() *Quaternion {
	if m != nil {
		return m.AttitudeQuaternion
	}
	return nil
}

type SubscribeCameraAttitudeEulerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCameraAttitudeEulerRequest) Reset()         { *m = SubscribeCameraAttitudeEulerRequest{} }
func (m *SubscribeCameraAttitudeEulerRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCameraAttitudeEulerRequest) ProtoMessage()    {}
func (*SubscribeCameraAttitudeEulerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{18}
}

func (m *SubscribeCameraAttitudeEulerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCameraAttitudeEulerRequest.Unmarshal(m, b)
}
func (m *SubscribeCameraAttitudeEulerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCameraAttitudeEulerRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCameraAttitudeEulerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCameraAttitudeEulerRequest.Merge(m, src)
}
func (m *SubscribeCameraAttitudeEulerRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCameraAttitudeEulerRequest.Size(m)
}
func (m *SubscribeCameraAttitudeEulerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCameraAttitudeEulerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCameraAttitudeEulerRequest proto.InternalMessageInfo

type CameraAttitudeEulerResponse struct {
	AttitudeEuler        *EulerAngle `protobuf:"bytes,1,opt,name=attitude_euler,json=attitudeEuler,proto3" json:"attitude_euler,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CameraAttitudeEulerResponse) Reset()         { *m = CameraAttitudeEulerResponse{} }
func (m *CameraAttitudeEulerResponse) String() string { return proto.CompactTextString(m) }
func (*CameraAttitudeEulerResponse) ProtoMessage()    {}
func (*CameraAttitudeEulerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{19}
}

func (m *CameraAttitudeEulerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraAttitudeEulerResponse.Unmarshal(m, b)
}
func (m *CameraAttitudeEulerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraAttitudeEulerResponse.Marshal(b, m, deterministic)
}
func (m *CameraAttitudeEulerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraAttitudeEulerResponse.Merge(m, src)
}
func (m *CameraAttitudeEulerResponse) XXX_Size() int {
	return xxx_messageInfo_CameraAttitudeEulerResponse.Size(m)
}
func (m *CameraAttitudeEulerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraAttitudeEulerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CameraAttitudeEulerResponse proto.InternalMessageInfo

func (m *CameraAttitudeEulerResponse) GetAttitudeEuler() *EulerAngle {
	if m != nil {
		return m.AttitudeEuler
	}
	return nil
}

type SubscribeGroundSpeedNedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeGroundSpeedNedRequest) Reset()         { *m = SubscribeGroundSpeedNedRequest{} }
func (m *SubscribeGroundSpeedNedRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeGroundSpeedNedRequest) ProtoMessage()    {}
func (*SubscribeGroundSpeedNedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{20}
}

func (m *SubscribeGroundSpeedNedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeGroundSpeedNedRequest.Unmarshal(m, b)
}
func (m *SubscribeGroundSpeedNedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeGroundSpeedNedRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeGroundSpeedNedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeGroundSpeedNedRequest.Merge(m, src)
}
func (m *SubscribeGroundSpeedNedRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeGroundSpeedNedRequest.Size(m)
}
func (m *SubscribeGroundSpeedNedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeGroundSpeedNedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeGroundSpeedNedRequest proto.InternalMessageInfo

type GroundSpeedNedResponse struct {
	GroundSpeedNed       *SpeedNed `protobuf:"bytes,1,opt,name=ground_speed_ned,json=groundSpeedNed,proto3" json:"ground_speed_ned,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GroundSpeedNedResponse) Reset()         { *m = GroundSpeedNedResponse{} }
func (m *GroundSpeedNedResponse) String() string { return proto.CompactTextString(m) }
func (*GroundSpeedNedResponse) ProtoMessage()    {}
func (*GroundSpeedNedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{21}
}

func (m *GroundSpeedNedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroundSpeedNedResponse.Unmarshal(m, b)
}
func (m *GroundSpeedNedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroundSpeedNedResponse.Marshal(b, m, deterministic)
}
func (m *GroundSpeedNedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroundSpeedNedResponse.Merge(m, src)
}
func (m *GroundSpeedNedResponse) XXX_Size() int {
	return xxx_messageInfo_GroundSpeedNedResponse.Size(m)
}
func (m *GroundSpeedNedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroundSpeedNedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroundSpeedNedResponse proto.InternalMessageInfo

func (m *GroundSpeedNedResponse) GetGroundSpeedNed() *SpeedNed {
	if m != nil {
		return m.GroundSpeedNed
	}
	return nil
}

type SubscribeGpsInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeGpsInfoRequest) Reset()         { *m = SubscribeGpsInfoRequest{} }
func (m *SubscribeGpsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeGpsInfoRequest) ProtoMessage()    {}
func (*SubscribeGpsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{22}
}

func (m *SubscribeGpsInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeGpsInfoRequest.Unmarshal(m, b)
}
func (m *SubscribeGpsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeGpsInfoRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeGpsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeGpsInfoRequest.Merge(m, src)
}
func (m *SubscribeGpsInfoRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeGpsInfoRequest.Size(m)
}
func (m *SubscribeGpsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeGpsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeGpsInfoRequest proto.InternalMessageInfo

type GpsInfoResponse struct {
	GpsInfo              *GpsInfo `protobuf:"bytes,1,opt,name=gps_info,json=gpsInfo,proto3" json:"gps_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpsInfoResponse) Reset()         { *m = GpsInfoResponse{} }
func (m *GpsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GpsInfoResponse) ProtoMessage()    {}
func (*GpsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{23}
}

func (m *GpsInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpsInfoResponse.Unmarshal(m, b)
}
func (m *GpsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpsInfoResponse.Marshal(b, m, deterministic)
}
func (m *GpsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpsInfoResponse.Merge(m, src)
}
func (m *GpsInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GpsInfoResponse.Size(m)
}
func (m *GpsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GpsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GpsInfoResponse proto.InternalMessageInfo

func (m *GpsInfoResponse) GetGpsInfo() *GpsInfo {
	if m != nil {
		return m.GpsInfo
	}
	return nil
}

type SubscribeBatteryRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeBatteryRequest) Reset()         { *m = SubscribeBatteryRequest{} }
func (m *SubscribeBatteryRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeBatteryRequest) ProtoMessage()    {}
func (*SubscribeBatteryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{24}
}

func (m *SubscribeBatteryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeBatteryRequest.Unmarshal(m, b)
}
func (m *SubscribeBatteryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeBatteryRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeBatteryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeBatteryRequest.Merge(m, src)
}
func (m *SubscribeBatteryRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeBatteryRequest.Size(m)
}
func (m *SubscribeBatteryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeBatteryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeBatteryRequest proto.InternalMessageInfo

type BatteryResponse struct {
	Battery              *Battery `protobuf:"bytes,1,opt,name=battery,proto3" json:"battery,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatteryResponse) Reset()         { *m = BatteryResponse{} }
func (m *BatteryResponse) String() string { return proto.CompactTextString(m) }
func (*BatteryResponse) ProtoMessage()    {}
func (*BatteryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{25}
}

func (m *BatteryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatteryResponse.Unmarshal(m, b)
}
func (m *BatteryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatteryResponse.Marshal(b, m, deterministic)
}
func (m *BatteryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatteryResponse.Merge(m, src)
}
func (m *BatteryResponse) XXX_Size() int {
	return xxx_messageInfo_BatteryResponse.Size(m)
}
func (m *BatteryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatteryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatteryResponse proto.InternalMessageInfo

func (m *BatteryResponse) GetBattery() *Battery {
	if m != nil {
		return m.Battery
	}
	return nil
}

type SubscribeFlightModeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeFlightModeRequest) Reset()         { *m = SubscribeFlightModeRequest{} }
func (m *SubscribeFlightModeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeFlightModeRequest) ProtoMessage()    {}
func (*SubscribeFlightModeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{26}
}

func (m *SubscribeFlightModeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeFlightModeRequest.Unmarshal(m, b)
}
func (m *SubscribeFlightModeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeFlightModeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeFlightModeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeFlightModeRequest.Merge(m, src)
}
func (m *SubscribeFlightModeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeFlightModeRequest.Size(m)
}
func (m *SubscribeFlightModeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeFlightModeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeFlightModeRequest proto.InternalMessageInfo

type FlightModeResponse struct {
	FlightMode           FlightMode `protobuf:"varint,1,opt,name=flight_mode,json=flightMode,proto3,enum=mavsdk.rpc.telemetry.FlightMode" json:"flight_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FlightModeResponse) Reset()         { *m = FlightModeResponse{} }
func (m *FlightModeResponse) String() string { return proto.CompactTextString(m) }
func (*FlightModeResponse) ProtoMessage()    {}
func (*FlightModeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{27}
}

func (m *FlightModeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlightModeResponse.Unmarshal(m, b)
}
func (m *FlightModeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlightModeResponse.Marshal(b, m, deterministic)
}
func (m *FlightModeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlightModeResponse.Merge(m, src)
}
func (m *FlightModeResponse) XXX_Size() int {
	return xxx_messageInfo_FlightModeResponse.Size(m)
}
func (m *FlightModeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlightModeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlightModeResponse proto.InternalMessageInfo

func (m *FlightModeResponse) GetFlightMode() FlightMode {
	if m != nil {
		return m.FlightMode
	}
	return FlightMode_UNKNOWN
}

type SubscribeHealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHealthRequest) Reset()         { *m = SubscribeHealthRequest{} }
func (m *SubscribeHealthRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeHealthRequest) ProtoMessage()    {}
func (*SubscribeHealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{28}
}

func (m *SubscribeHealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeHealthRequest.Unmarshal(m, b)
}
func (m *SubscribeHealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeHealthRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeHealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHealthRequest.Merge(m, src)
}
func (m *SubscribeHealthRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeHealthRequest.Size(m)
}
func (m *SubscribeHealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHealthRequest proto.InternalMessageInfo

type HealthResponse struct {
	Health               *Health  `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{29}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetHealth() *Health {
	if m != nil {
		return m.Health
	}
	return nil
}

type SubscribeRcStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRcStatusRequest) Reset()         { *m = SubscribeRcStatusRequest{} }
func (m *SubscribeRcStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRcStatusRequest) ProtoMessage()    {}
func (*SubscribeRcStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{30}
}

func (m *SubscribeRcStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRcStatusRequest.Unmarshal(m, b)
}
func (m *SubscribeRcStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRcStatusRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRcStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRcStatusRequest.Merge(m, src)
}
func (m *SubscribeRcStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRcStatusRequest.Size(m)
}
func (m *SubscribeRcStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRcStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRcStatusRequest proto.InternalMessageInfo

type RcStatusResponse struct {
	RcStatus             *RcStatus `protobuf:"bytes,1,opt,name=rc_status,json=rcStatus,proto3" json:"rc_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RcStatusResponse) Reset()         { *m = RcStatusResponse{} }
func (m *RcStatusResponse) String() string { return proto.CompactTextString(m) }
func (*RcStatusResponse) ProtoMessage()    {}
func (*RcStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{31}
}

func (m *RcStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcStatusResponse.Unmarshal(m, b)
}
func (m *RcStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcStatusResponse.Marshal(b, m, deterministic)
}
func (m *RcStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcStatusResponse.Merge(m, src)
}
func (m *RcStatusResponse) XXX_Size() int {
	return xxx_messageInfo_RcStatusResponse.Size(m)
}
func (m *RcStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RcStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RcStatusResponse proto.InternalMessageInfo

func (m *RcStatusResponse) GetRcStatus() *RcStatus {
	if m != nil {
		return m.RcStatus
	}
	return nil
}

type SubscribeStatusTextRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeStatusTextRequest) Reset()         { *m = SubscribeStatusTextRequest{} }
func (m *SubscribeStatusTextRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeStatusTextRequest) ProtoMessage()    {}
func (*SubscribeStatusTextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{32}
}

func (m *SubscribeStatusTextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeStatusTextRequest.Unmarshal(m, b)
}
func (m *SubscribeStatusTextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeStatusTextRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeStatusTextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeStatusTextRequest.Merge(m, src)
}
func (m *SubscribeStatusTextRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeStatusTextRequest.Size(m)
}
func (m *SubscribeStatusTextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeStatusTextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeStatusTextRequest proto.InternalMessageInfo

type StatusTextResponse struct {
	StatusText           *StatusText `protobuf:"bytes,1,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StatusTextResponse) Reset()         { *m = StatusTextResponse{} }
func (m *StatusTextResponse) String() string { return proto.CompactTextString(m) }
func (*StatusTextResponse) ProtoMessage()    {}
func (*StatusTextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{33}
}

func (m *StatusTextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusTextResponse.Unmarshal(m, b)
}
func (m *StatusTextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusTextResponse.Marshal(b, m, deterministic)
}
func (m *StatusTextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusTextResponse.Merge(m, src)
}
func (m *StatusTextResponse) XXX_Size() int {
	return xxx_messageInfo_StatusTextResponse.Size(m)
}
func (m *StatusTextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusTextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusTextResponse proto.InternalMessageInfo

func (m *StatusTextResponse) GetStatusText() *StatusText {
	if m != nil {
		return m.StatusText
	}
	return nil
}

type SubscribeActuatorControlTargetRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeActuatorControlTargetRequest) Reset()         { *m = SubscribeActuatorControlTargetRequest{} }
func (m *SubscribeActuatorControlTargetRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeActuatorControlTargetRequest) ProtoMessage()    {}
func (*SubscribeActuatorControlTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{34}
}

func (m *SubscribeActuatorControlTargetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeActuatorControlTargetRequest.Unmarshal(m, b)
}
func (m *SubscribeActuatorControlTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeActuatorControlTargetRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeActuatorControlTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeActuatorControlTargetRequest.Merge(m, src)
}
func (m *SubscribeActuatorControlTargetRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeActuatorControlTargetRequest.Size(m)
}
func (m *SubscribeActuatorControlTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeActuatorControlTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeActuatorControlTargetRequest proto.InternalMessageInfo

type ActuatorControlTargetResponse struct {
	ActuatorControlTarget *ActuatorControlTarget `protobuf:"bytes,1,opt,name=actuator_control_target,json=actuatorControlTarget,proto3" json:"actuator_control_target,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *ActuatorControlTargetResponse) Reset()         { *m = ActuatorControlTargetResponse{} }
func (m *ActuatorControlTargetResponse) String() string { return proto.CompactTextString(m) }
func (*ActuatorControlTargetResponse) ProtoMessage()    {}
func (*ActuatorControlTargetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{35}
}

func (m *ActuatorControlTargetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActuatorControlTargetResponse.Unmarshal(m, b)
}
func (m *ActuatorControlTargetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActuatorControlTargetResponse.Marshal(b, m, deterministic)
}
func (m *ActuatorControlTargetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActuatorControlTargetResponse.Merge(m, src)
}
func (m *ActuatorControlTargetResponse) XXX_Size() int {
	return xxx_messageInfo_ActuatorControlTargetResponse.Size(m)
}
func (m *ActuatorControlTargetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActuatorControlTargetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActuatorControlTargetResponse proto.InternalMessageInfo

func (m *ActuatorControlTargetResponse) GetActuatorControlTarget() *ActuatorControlTarget {
	if m != nil {
		return m.ActuatorControlTarget
	}
	return nil
}

type SubscribeActuatorOutputStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeActuatorOutputStatusRequest) Reset()         { *m = SubscribeActuatorOutputStatusRequest{} }
func (m *SubscribeActuatorOutputStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeActuatorOutputStatusRequest) ProtoMessage()    {}
func (*SubscribeActuatorOutputStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{36}
}

func (m *SubscribeActuatorOutputStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeActuatorOutputStatusRequest.Unmarshal(m, b)
}
func (m *SubscribeActuatorOutputStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeActuatorOutputStatusRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeActuatorOutputStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeActuatorOutputStatusRequest.Merge(m, src)
}
func (m *SubscribeActuatorOutputStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeActuatorOutputStatusRequest.Size(m)
}
func (m *SubscribeActuatorOutputStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeActuatorOutputStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeActuatorOutputStatusRequest proto.InternalMessageInfo

type ActuatorOutputStatusResponse struct {
	ActuatorOutputStatus *ActuatorOutputStatus `protobuf:"bytes,1,opt,name=actuator_output_status,json=actuatorOutputStatus,proto3" json:"actuator_output_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ActuatorOutputStatusResponse) Reset()         { *m = ActuatorOutputStatusResponse{} }
func (m *ActuatorOutputStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ActuatorOutputStatusResponse) ProtoMessage()    {}
func (*ActuatorOutputStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{37}
}

func (m *ActuatorOutputStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActuatorOutputStatusResponse.Unmarshal(m, b)
}
func (m *ActuatorOutputStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActuatorOutputStatusResponse.Marshal(b, m, deterministic)
}
func (m *ActuatorOutputStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActuatorOutputStatusResponse.Merge(m, src)
}
func (m *ActuatorOutputStatusResponse) XXX_Size() int {
	return xxx_messageInfo_ActuatorOutputStatusResponse.Size(m)
}
func (m *ActuatorOutputStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActuatorOutputStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActuatorOutputStatusResponse proto.InternalMessageInfo

func (m *ActuatorOutputStatusResponse) GetActuatorOutputStatus() *ActuatorOutputStatus {
	if m != nil {
		return m.ActuatorOutputStatus
	}
	return nil
}

type SubscribeOdometryRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeOdometryRequest) Reset()         { *m = SubscribeOdometryRequest{} }
func (m *SubscribeOdometryRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeOdometryRequest) ProtoMessage()    {}
func (*SubscribeOdometryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{38}
}

func (m *SubscribeOdometryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeOdometryRequest.Unmarshal(m, b)
}
func (m *SubscribeOdometryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeOdometryRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeOdometryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOdometryRequest.Merge(m, src)
}
func (m *SubscribeOdometryRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeOdometryRequest.Size(m)
}
func (m *SubscribeOdometryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOdometryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOdometryRequest proto.InternalMessageInfo

type OdometryResponse struct {
	Odometry             *Odometry `protobuf:"bytes,1,opt,name=odometry,proto3" json:"odometry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OdometryResponse) Reset()         { *m = OdometryResponse{} }
func (m *OdometryResponse) String() string { return proto.CompactTextString(m) }
func (*OdometryResponse) ProtoMessage()    {}
func (*OdometryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{39}
}

func (m *OdometryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OdometryResponse.Unmarshal(m, b)
}
func (m *OdometryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OdometryResponse.Marshal(b, m, deterministic)
}
func (m *OdometryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OdometryResponse.Merge(m, src)
}
func (m *OdometryResponse) XXX_Size() int {
	return xxx_messageInfo_OdometryResponse.Size(m)
}
func (m *OdometryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OdometryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OdometryResponse proto.InternalMessageInfo

func (m *OdometryResponse) GetOdometry() *Odometry {
	if m != nil {
		return m.Odometry
	}
	return nil
}

// Position type in global coordinates.
type Position struct {
	LatitudeDeg          float64  `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`
	LongitudeDeg         float64  `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`
	AbsoluteAltitudeM    float32  `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`
	RelativeAltitudeM    float32  `protobuf:"fixed32,4,opt,name=relative_altitude_m,json=relativeAltitudeM,proto3" json:"relative_altitude_m,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{40}
}

func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetLatitudeDeg() float64 {
	if m != nil {
		return m.LatitudeDeg
	}
	return 0
}

func (m *Position) GetLongitudeDeg() float64 {
	if m != nil {
		return m.LongitudeDeg
	}
	return 0
}

func (m *Position) GetAbsoluteAltitudeM() float32 {
	if m != nil {
		return m.AbsoluteAltitudeM
	}
	return 0
}

func (m *Position) GetRelativeAltitudeM() float32 {
	if m != nil {
		return m.RelativeAltitudeM
	}
	return 0
}

//
// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	W                    float32  `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"`
	X                    float32  `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quaternion) Reset()         { *m = Quaternion{} }
func (m *Quaternion) String() string { return proto.CompactTextString(m) }
func (*Quaternion) ProtoMessage()    {}
func (*Quaternion) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{41}
}

func (m *Quaternion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quaternion.Unmarshal(m, b)
}
func (m *Quaternion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quaternion.Marshal(b, m, deterministic)
}
func (m *Quaternion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quaternion.Merge(m, src)
}
func (m *Quaternion) XXX_Size() int {
	return xxx_messageInfo_Quaternion.Size(m)
}
func (m *Quaternion) XXX_DiscardUnknown() {
	xxx_messageInfo_Quaternion.DiscardUnknown(m)
}

var xxx_messageInfo_Quaternion proto.InternalMessageInfo

func (m *Quaternion) GetW() float32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Quaternion) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Quaternion) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Quaternion) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

//
// Euler angle type.
//
// All rotations and axis systems follow the right-hand rule.
// The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
//
// For more info see https://en.wikipedia.org/wiki/Euler_angles
type EulerAngle struct {
	RollDeg              float32  `protobuf:"fixed32,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`
	PitchDeg             float32  `protobuf:"fixed32,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`
	YawDeg               float32  `protobuf:"fixed32,3,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EulerAngle) Reset()         { *m = EulerAngle{} }
func (m *EulerAngle) String() string { return proto.CompactTextString(m) }
func (*EulerAngle) ProtoMessage()    {}
func (*EulerAngle) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{42}
}

func (m *EulerAngle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EulerAngle.Unmarshal(m, b)
}
func (m *EulerAngle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EulerAngle.Marshal(b, m, deterministic)
}
func (m *EulerAngle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EulerAngle.Merge(m, src)
}
func (m *EulerAngle) XXX_Size() int {
	return xxx_messageInfo_EulerAngle.Size(m)
}
func (m *EulerAngle) XXX_DiscardUnknown() {
	xxx_messageInfo_EulerAngle.DiscardUnknown(m)
}

var xxx_messageInfo_EulerAngle proto.InternalMessageInfo

func (m *EulerAngle) GetRollDeg() float32 {
	if m != nil {
		return m.RollDeg
	}
	return 0
}

func (m *EulerAngle) GetPitchDeg() float32 {
	if m != nil {
		return m.PitchDeg
	}
	return 0
}

func (m *EulerAngle) GetYawDeg() float32 {
	if m != nil {
		return m.YawDeg
	}
	return 0
}

// Angular velocity type
type AngularVelocityBody struct {
	RollRadS             float32  `protobuf:"fixed32,1,opt,name=roll_rad_s,json=rollRadS,proto3" json:"roll_rad_s,omitempty"`
	PitchRadS            float32  `protobuf:"fixed32,2,opt,name=pitch_rad_s,json=pitchRadS,proto3" json:"pitch_rad_s,omitempty"`
	YawRadS              float32  `protobuf:"fixed32,3,opt,name=yaw_rad_s,json=yawRadS,proto3" json:"yaw_rad_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AngularVelocityBody) Reset()         { *m = AngularVelocityBody{} }
func (m *AngularVelocityBody) String() string { return proto.CompactTextString(m) }
func (*AngularVelocityBody) ProtoMessage()    {}
func (*AngularVelocityBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{43}
}

func (m *AngularVelocityBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AngularVelocityBody.Unmarshal(m, b)
}
func (m *AngularVelocityBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AngularVelocityBody.Marshal(b, m, deterministic)
}
func (m *AngularVelocityBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AngularVelocityBody.Merge(m, src)
}
func (m *AngularVelocityBody) XXX_Size() int {
	return xxx_messageInfo_AngularVelocityBody.Size(m)
}
func (m *AngularVelocityBody) XXX_DiscardUnknown() {
	xxx_messageInfo_AngularVelocityBody.DiscardUnknown(m)
}

var xxx_messageInfo_AngularVelocityBody proto.InternalMessageInfo

func (m *AngularVelocityBody) GetRollRadS() float32 {
	if m != nil {
		return m.RollRadS
	}
	return 0
}

func (m *AngularVelocityBody) GetPitchRadS() float32 {
	if m != nil {
		return m.PitchRadS
	}
	return 0
}

func (m *AngularVelocityBody) GetYawRadS() float32 {
	if m != nil {
		return m.YawRadS
	}
	return 0
}

// Speed type, represented in the NED (North East Down) frame and in metres/second.
type SpeedNed struct {
	VelocityNorthMS      float32  `protobuf:"fixed32,1,opt,name=velocity_north_m_s,json=velocityNorthMS,proto3" json:"velocity_north_m_s,omitempty"`
	VelocityEastMS       float32  `protobuf:"fixed32,2,opt,name=velocity_east_m_s,json=velocityEastMS,proto3" json:"velocity_east_m_s,omitempty"`
	VelocityDownMS       float32  `protobuf:"fixed32,3,opt,name=velocity_down_m_s,json=velocityDownMS,proto3" json:"velocity_down_m_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeedNed) Reset()         { *m = SpeedNed{} }
func (m *SpeedNed) String() string { return proto.CompactTextString(m) }
func (*SpeedNed) ProtoMessage()    {}
func (*SpeedNed) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{44}
}

func (m *SpeedNed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeedNed.Unmarshal(m, b)
}
func (m *SpeedNed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeedNed.Marshal(b, m, deterministic)
}
func (m *SpeedNed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeedNed.Merge(m, src)
}
func (m *SpeedNed) XXX_Size() int {
	return xxx_messageInfo_SpeedNed.Size(m)
}
func (m *SpeedNed) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeedNed.DiscardUnknown(m)
}

var xxx_messageInfo_SpeedNed proto.InternalMessageInfo

func (m *SpeedNed) GetVelocityNorthMS() float32 {
	if m != nil {
		return m.VelocityNorthMS
	}
	return 0
}

func (m *SpeedNed) GetVelocityEastMS() float32 {
	if m != nil {
		return m.VelocityEastMS
	}
	return 0
}

func (m *SpeedNed) GetVelocityDownMS() float32 {
	if m != nil {
		return m.VelocityDownMS
	}
	return 0
}

// GPS information type.
type GpsInfo struct {
	NumSatellites        int32    `protobuf:"varint,1,opt,name=num_satellites,json=numSatellites,proto3" json:"num_satellites,omitempty"`
	FixType              FixType  `protobuf:"varint,2,opt,name=fix_type,json=fixType,proto3,enum=mavsdk.rpc.telemetry.FixType" json:"fix_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpsInfo) Reset()         { *m = GpsInfo{} }
func (m *GpsInfo) String() string { return proto.CompactTextString(m) }
func (*GpsInfo) ProtoMessage()    {}
func (*GpsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{45}
}

func (m *GpsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpsInfo.Unmarshal(m, b)
}
func (m *GpsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpsInfo.Marshal(b, m, deterministic)
}
func (m *GpsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpsInfo.Merge(m, src)
}
func (m *GpsInfo) XXX_Size() int {
	return xxx_messageInfo_GpsInfo.Size(m)
}
func (m *GpsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GpsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GpsInfo proto.InternalMessageInfo

func (m *GpsInfo) GetNumSatellites() int32 {
	if m != nil {
		return m.NumSatellites
	}
	return 0
}

func (m *GpsInfo) GetFixType() FixType {
	if m != nil {
		return m.FixType
	}
	return FixType_NO_GPS
}

// Battery type.
type Battery struct {
	VoltageV             float32  `protobuf:"fixed32,1,opt,name=voltage_v,json=voltageV,proto3" json:"voltage_v,omitempty"`
	RemainingPercent     float32  `protobuf:"fixed32,2,opt,name=remaining_percent,json=remainingPercent,proto3" json:"remaining_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Battery) Reset()         { *m = Battery{} }
func (m *Battery) String() string { return proto.CompactTextString(m) }
func (*Battery) ProtoMessage()    {}
func (*Battery) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{46}
}

func (m *Battery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Battery.Unmarshal(m, b)
}
func (m *Battery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Battery.Marshal(b, m, deterministic)
}
func (m *Battery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battery.Merge(m, src)
}
func (m *Battery) XXX_Size() int {
	return xxx_messageInfo_Battery.Size(m)
}
func (m *Battery) XXX_DiscardUnknown() {
	xxx_messageInfo_Battery.DiscardUnknown(m)
}

var xxx_messageInfo_Battery proto.InternalMessageInfo

func (m *Battery) GetVoltageV() float32 {
	if m != nil {
		return m.VoltageV
	}
	return 0
}

func (m *Battery) GetRemainingPercent() float32 {
	if m != nil {
		return m.RemainingPercent
	}
	return 0
}

// Health type.
type Health struct {
	IsGyrometerCalibrationOk     bool     `protobuf:"varint,1,opt,name=is_gyrometer_calibration_ok,json=isGyrometerCalibrationOk,proto3" json:"is_gyrometer_calibration_ok,omitempty"`
	IsAccelerometerCalibrationOk bool     `protobuf:"varint,2,opt,name=is_accelerometer_calibration_ok,json=isAccelerometerCalibrationOk,proto3" json:"is_accelerometer_calibration_ok,omitempty"`
	IsMagnetometerCalibrationOk  bool     `protobuf:"varint,3,opt,name=is_magnetometer_calibration_ok,json=isMagnetometerCalibrationOk,proto3" json:"is_magnetometer_calibration_ok,omitempty"`
	IsLevelCalibrationOk         bool     `protobuf:"varint,4,opt,name=is_level_calibration_ok,json=isLevelCalibrationOk,proto3" json:"is_level_calibration_ok,omitempty"`
	IsLocalPositionOk            bool     `protobuf:"varint,5,opt,name=is_local_position_ok,json=isLocalPositionOk,proto3" json:"is_local_position_ok,omitempty"`
	IsGlobalPositionOk           bool     `protobuf:"varint,6,opt,name=is_global_position_ok,json=isGlobalPositionOk,proto3" json:"is_global_position_ok,omitempty"`
	IsHomePositionOk             bool     `protobuf:"varint,7,opt,name=is_home_position_ok,json=isHomePositionOk,proto3" json:"is_home_position_ok,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *Health) Reset()         { *m = Health{} }
func (m *Health) String() string { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()    {}
func (*Health) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{47}
}

func (m *Health) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Health.Unmarshal(m, b)
}
func (m *Health) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Health.Marshal(b, m, deterministic)
}
func (m *Health) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Health.Merge(m, src)
}
func (m *Health) XXX_Size() int {
	return xxx_messageInfo_Health.Size(m)
}
func (m *Health) XXX_DiscardUnknown() {
	xxx_messageInfo_Health.DiscardUnknown(m)
}

var xxx_messageInfo_Health proto.InternalMessageInfo

func (m *Health) GetIsGyrometerCalibrationOk() bool {
	if m != nil {
		return m.IsGyrometerCalibrationOk
	}
	return false
}

func (m *Health) GetIsAccelerometerCalibrationOk() bool {
	if m != nil {
		return m.IsAccelerometerCalibrationOk
	}
	return false
}

func (m *Health) GetIsMagnetometerCalibrationOk() bool {
	if m != nil {
		return m.IsMagnetometerCalibrationOk
	}
	return false
}

func (m *Health) GetIsLevelCalibrationOk() bool {
	if m != nil {
		return m.IsLevelCalibrationOk
	}
	return false
}

func (m *Health) GetIsLocalPositionOk() bool {
	if m != nil {
		return m.IsLocalPositionOk
	}
	return false
}

func (m *Health) GetIsGlobalPositionOk() bool {
	if m != nil {
		return m.IsGlobalPositionOk
	}
	return false
}

func (m *Health) GetIsHomePositionOk() bool {
	if m != nil {
		return m.IsHomePositionOk
	}
	return false
}

// Remote control status type.
type RcStatus struct {
	WasAvailableOnce      bool     `protobuf:"varint,1,opt,name=was_available_once,json=wasAvailableOnce,proto3" json:"was_available_once,omitempty"`
	IsAvailable           bool     `protobuf:"varint,2,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	SignalStrengthPercent float32  `protobuf:"fixed32,3,opt,name=signal_strength_percent,json=signalStrengthPercent,proto3" json:"signal_strength_percent,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RcStatus) Reset()         { *m = RcStatus{} }
func (m *RcStatus) String() string { return proto.CompactTextString(m) }
func (*RcStatus) ProtoMessage()    {}
func (*RcStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{48}
}

func (m *RcStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcStatus.Unmarshal(m, b)
}
func (m *RcStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcStatus.Marshal(b, m, deterministic)
}
func (m *RcStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcStatus.Merge(m, src)
}
func (m *RcStatus) XXX_Size() int {
	return xxx_messageInfo_RcStatus.Size(m)
}
func (m *RcStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RcStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RcStatus proto.InternalMessageInfo

func (m *RcStatus) GetWasAvailableOnce() bool {
	if m != nil {
		return m.WasAvailableOnce
	}
	return false
}

func (m *RcStatus) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

func (m *RcStatus) GetSignalStrengthPercent() float32 {
	if m != nil {
		return m.SignalStrengthPercent
	}
	return 0
}

// StatusText information type.
type StatusText struct {
	Type                 StatusText_StatusType `protobuf:"varint,1,opt,name=type,proto3,enum=mavsdk.rpc.telemetry.StatusText_StatusType" json:"type,omitempty"`
	Text                 string                `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StatusText) Reset()         { *m = StatusText{} }
func (m *StatusText) String() string { return proto.CompactTextString(m) }
func (*StatusText) ProtoMessage()    {}
func (*StatusText) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{49}
}

func (m *StatusText) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusText.Unmarshal(m, b)
}
func (m *StatusText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusText.Marshal(b, m, deterministic)
}
func (m *StatusText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusText.Merge(m, src)
}
func (m *StatusText) XXX_Size() int {
	return xxx_messageInfo_StatusText.Size(m)
}
func (m *StatusText) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusText.DiscardUnknown(m)
}

var xxx_messageInfo_StatusText proto.InternalMessageInfo

func (m *StatusText) GetType() StatusText_StatusType {
	if m != nil {
		return m.Type
	}
	return StatusText_INFO
}

func (m *StatusText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ActuatorControlTarget struct {
	Group                int32     `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Controls             []float32 `protobuf:"fixed32,2,rep,packed,name=controls,proto3" json:"controls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ActuatorControlTarget) Reset()         { *m = ActuatorControlTarget{} }
func (m *ActuatorControlTarget) String() string { return proto.CompactTextString(m) }
func (*ActuatorControlTarget) ProtoMessage()    {}
func (*ActuatorControlTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{50}
}

func (m *ActuatorControlTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActuatorControlTarget.Unmarshal(m, b)
}
func (m *ActuatorControlTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActuatorControlTarget.Marshal(b, m, deterministic)
}
func (m *ActuatorControlTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActuatorControlTarget.Merge(m, src)
}
func (m *ActuatorControlTarget) XXX_Size() int {
	return xxx_messageInfo_ActuatorControlTarget.Size(m)
}
func (m *ActuatorControlTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ActuatorControlTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ActuatorControlTarget proto.InternalMessageInfo

func (m *ActuatorControlTarget) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *ActuatorControlTarget) GetControls() []float32 {
	if m != nil {
		return m.Controls
	}
	return nil
}

type ActuatorOutputStatus struct {
	Active               uint32    `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Actuator             []float32 `protobuf:"fixed32,2,rep,packed,name=actuator,proto3" json:"actuator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ActuatorOutputStatus) Reset()         { *m = ActuatorOutputStatus{} }
func (m *ActuatorOutputStatus) String() string { return proto.CompactTextString(m) }
func (*ActuatorOutputStatus) ProtoMessage()    {}
func (*ActuatorOutputStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{51}
}

func (m *ActuatorOutputStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActuatorOutputStatus.Unmarshal(m, b)
}
func (m *ActuatorOutputStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActuatorOutputStatus.Marshal(b, m, deterministic)
}
func (m *ActuatorOutputStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActuatorOutputStatus.Merge(m, src)
}
func (m *ActuatorOutputStatus) XXX_Size() int {
	return xxx_messageInfo_ActuatorOutputStatus.Size(m)
}
func (m *ActuatorOutputStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ActuatorOutputStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ActuatorOutputStatus proto.InternalMessageInfo

func (m *ActuatorOutputStatus) GetActive() uint32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *ActuatorOutputStatus) GetActuator() []float32 {
	if m != nil {
		return m.Actuator
	}
	return nil
}

// Odometry message type.
type Odometry struct {
	TimeUsec             uint64               `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`
	FrameId              Odometry_MavFrame    `protobuf:"varint,2,opt,name=frame_id,json=frameId,proto3,enum=mavsdk.rpc.telemetry.Odometry_MavFrame" json:"frame_id,omitempty"`
	ChildFrameId         Odometry_MavFrame    `protobuf:"varint,3,opt,name=child_frame_id,json=childFrameId,proto3,enum=mavsdk.rpc.telemetry.Odometry_MavFrame" json:"child_frame_id,omitempty"`
	PositionBody         *PositionBody        `protobuf:"bytes,4,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`
	Q                    *Quaternion          `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	SpeedBody            *SpeedBody           `protobuf:"bytes,6,opt,name=speed_body,json=speedBody,proto3" json:"speed_body,omitempty"`
	AngularVelocityBody  *AngularVelocityBody `protobuf:"bytes,7,opt,name=angular_velocity_body,json=angularVelocityBody,proto3" json:"angular_velocity_body,omitempty"`
	PoseCovariance       *Covariance          `protobuf:"bytes,8,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"`
	VelocityCovariance   *Covariance          `protobuf:"bytes,9,opt,name=velocity_covariance,json=velocityCovariance,proto3" json:"velocity_covariance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Odometry) Reset()         { *m = Odometry{} }
func (m *Odometry) String() string { return proto.CompactTextString(m) }
func (*Odometry) ProtoMessage()    {}
func (*Odometry) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{52}
}

func (m *Odometry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Odometry.Unmarshal(m, b)
}
func (m *Odometry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Odometry.Marshal(b, m, deterministic)
}
func (m *Odometry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Odometry.Merge(m, src)
}
func (m *Odometry) XXX_Size() int {
	return xxx_messageInfo_Odometry.Size(m)
}
func (m *Odometry) XXX_DiscardUnknown() {
	xxx_messageInfo_Odometry.DiscardUnknown(m)
}

var xxx_messageInfo_Odometry proto.InternalMessageInfo

func (m *Odometry) GetTimeUsec() uint64 {
	if m != nil {
		return m.TimeUsec
	}
	return 0
}

func (m *Odometry) GetFrameId() Odometry_MavFrame {
	if m != nil {
		return m.FrameId
	}
	return Odometry_UNDEF
}

func (m *Odometry) GetChildFrameId() Odometry_MavFrame {
	if m != nil {
		return m.ChildFrameId
	}
	return Odometry_UNDEF
}

func (m *Odometry) GetPositionBody() *PositionBody {
	if m != nil {
		return m.PositionBody
	}
	return nil
}

func (m *Odometry) GetQ() *Quaternion {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *Odometry) GetSpeedBody() *SpeedBody {
	if m != nil {
		return m.SpeedBody
	}
	return nil
}

func (m *Odometry) GetAngularVelocityBody() *AngularVelocityBody {
	if m != nil {
		return m.AngularVelocityBody
	}
	return nil
}

func (m *Odometry) GetPoseCovariance() *Covariance {
	if m != nil {
		return m.PoseCovariance
	}
	return nil
}

func (m *Odometry) GetVelocityCovariance() *Covariance {
	if m != nil {
		return m.VelocityCovariance
	}
	return nil
}

// Covariance type.
// Row-major representation of a 6x6 cross-covariance matrix
// upper right triangle.
// Set first to NaN if unknown.
type Covariance struct {
	CovarianceMatrix     []float32 `protobuf:"fixed32,1,rep,packed,name=covariance_matrix,json=covarianceMatrix,proto3" json:"covariance_matrix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Covariance) Reset()         { *m = Covariance{} }
func (m *Covariance) String() string { return proto.CompactTextString(m) }
func (*Covariance) ProtoMessage()    {}
func (*Covariance) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{53}
}

func (m *Covariance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Covariance.Unmarshal(m, b)
}
func (m *Covariance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Covariance.Marshal(b, m, deterministic)
}
func (m *Covariance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Covariance.Merge(m, src)
}
func (m *Covariance) XXX_Size() int {
	return xxx_messageInfo_Covariance.Size(m)
}
func (m *Covariance) XXX_DiscardUnknown() {
	xxx_messageInfo_Covariance.DiscardUnknown(m)
}

var xxx_messageInfo_Covariance proto.InternalMessageInfo

func (m *Covariance) GetCovarianceMatrix() []float32 {
	if m != nil {
		return m.CovarianceMatrix
	}
	return nil
}

// Speed type, represented in the Body (X Y Z) frame and in metres/second.
type SpeedBody struct {
	VelocityXMS          float32  `protobuf:"fixed32,1,opt,name=velocity_x_m_s,json=velocityXMS,proto3" json:"velocity_x_m_s,omitempty"`
	VelocityYMS          float32  `protobuf:"fixed32,2,opt,name=velocity_y_m_s,json=velocityYMS,proto3" json:"velocity_y_m_s,omitempty"`
	VelocityZMS          float32  `protobuf:"fixed32,3,opt,name=velocity_z_m_s,json=velocityZMS,proto3" json:"velocity_z_m_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeedBody) Reset()         { *m = SpeedBody{} }
func (m *SpeedBody) String() string { return proto.CompactTextString(m) }
func (*SpeedBody) ProtoMessage()    {}
func (*SpeedBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{54}
}

func (m *SpeedBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeedBody.Unmarshal(m, b)
}
func (m *SpeedBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeedBody.Marshal(b, m, deterministic)
}
func (m *SpeedBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeedBody.Merge(m, src)
}
func (m *SpeedBody) XXX_Size() int {
	return xxx_messageInfo_SpeedBody.Size(m)
}
func (m *SpeedBody) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeedBody.DiscardUnknown(m)
}

var xxx_messageInfo_SpeedBody proto.InternalMessageInfo

func (m *SpeedBody) GetVelocityXMS() float32 {
	if m != nil {
		return m.VelocityXMS
	}
	return 0
}

func (m *SpeedBody) GetVelocityYMS() float32 {
	if m != nil {
		return m.VelocityYMS
	}
	return 0
}

func (m *SpeedBody) GetVelocityZMS() float32 {
	if m != nil {
		return m.VelocityZMS
	}
	return 0
}

// Position type, represented in the Body (X Y Z) frame
type PositionBody struct {
	XM                   float32  `protobuf:"fixed32,1,opt,name=x_m,json=xM,proto3" json:"x_m,omitempty"`
	YM                   float32  `protobuf:"fixed32,2,opt,name=y_m,json=yM,proto3" json:"y_m,omitempty"`
	ZM                   float32  `protobuf:"fixed32,3,opt,name=z_m,json=zM,proto3" json:"z_m,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionBody) Reset()         { *m = PositionBody{} }
func (m *PositionBody) String() string { return proto.CompactTextString(m) }
func (*PositionBody) ProtoMessage()    {}
func (*PositionBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffc2c517594509, []int{55}
}

func (m *PositionBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionBody.Unmarshal(m, b)
}
func (m *PositionBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionBody.Marshal(b, m, deterministic)
}
func (m *PositionBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionBody.Merge(m, src)
}
func (m *PositionBody) XXX_Size() int {
	return xxx_messageInfo_PositionBody.Size(m)
}
func (m *PositionBody) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionBody.DiscardUnknown(m)
}

var xxx_messageInfo_PositionBody proto.InternalMessageInfo

func (m *PositionBody) GetXM() float32 {
	if m != nil {
		return m.XM
	}
	return 0
}

func (m *PositionBody) GetYM() float32 {
	if m != nil {
		return m.YM
	}
	return 0
}

func (m *PositionBody) GetZM() float32 {
	if m != nil {
		return m.ZM
	}
	return 0
}

func init() {
	proto.RegisterEnum("mavsdk.rpc.telemetry.FixType", FixType_name, FixType_value)
	proto.RegisterEnum("mavsdk.rpc.telemetry.FlightMode", FlightMode_name, FlightMode_value)
	proto.RegisterEnum("mavsdk.rpc.telemetry.LandedState", LandedState_name, LandedState_value)
	proto.RegisterEnum("mavsdk.rpc.telemetry.StatusText_StatusType", StatusText_StatusType_name, StatusText_StatusType_value)
	proto.RegisterEnum("mavsdk.rpc.telemetry.Odometry_MavFrame", Odometry_MavFrame_name, Odometry_MavFrame_value)
	proto.RegisterType((*SubscribePositionRequest)(nil), "mavsdk.rpc.telemetry.SubscribePositionRequest")
	proto.RegisterType((*PositionResponse)(nil), "mavsdk.rpc.telemetry.PositionResponse")
	proto.RegisterType((*SubscribeHomeRequest)(nil), "mavsdk.rpc.telemetry.SubscribeHomeRequest")
	proto.RegisterType((*HomeResponse)(nil), "mavsdk.rpc.telemetry.HomeResponse")
	proto.RegisterType((*SubscribeInAirRequest)(nil), "mavsdk.rpc.telemetry.SubscribeInAirRequest")
	proto.RegisterType((*InAirResponse)(nil), "mavsdk.rpc.telemetry.InAirResponse")
	proto.RegisterType((*SubscribeLandedStateRequest)(nil), "mavsdk.rpc.telemetry.SubscribeLandedStateRequest")
	proto.RegisterType((*LandedStateResponse)(nil), "mavsdk.rpc.telemetry.LandedStateResponse")
	proto.RegisterType((*SubscribeArmedRequest)(nil), "mavsdk.rpc.telemetry.SubscribeArmedRequest")
	proto.RegisterType((*ArmedResponse)(nil), "mavsdk.rpc.telemetry.ArmedResponse")
	proto.RegisterType((*SubscribeAttitudeQuaternionRequest)(nil), "mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest")
	proto.RegisterType((*AttitudeQuaternionResponse)(nil), "mavsdk.rpc.telemetry.AttitudeQuaternionResponse")
	proto.RegisterType((*SubscribeAttitudeEulerRequest)(nil), "mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest")
	proto.RegisterType((*AttitudeEulerResponse)(nil), "mavsdk.rpc.telemetry.AttitudeEulerResponse")
	proto.RegisterType((*SubscribeAttitudeAngularVelocityBodyRequest)(nil), "mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest")
	proto.RegisterType((*AttitudeAngularVelocityBodyResponse)(nil), "mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse")
	proto.RegisterType((*SubscribeCameraAttitudeQuaternionRequest)(nil), "mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest")
	proto.RegisterType((*CameraAttitudeQuaternionResponse)(nil), "mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse")
	proto.RegisterType((*SubscribeCameraAttitudeEulerRequest)(nil), "mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest")
	proto.RegisterType((*CameraAttitudeEulerResponse)(nil), "mavsdk.rpc.telemetry.CameraAttitudeEulerResponse")
	proto.RegisterType((*SubscribeGroundSpeedNedRequest)(nil), "mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest")
	proto.RegisterType((*GroundSpeedNedResponse)(nil), "mavsdk.rpc.telemetry.GroundSpeedNedResponse")
	proto.RegisterType((*SubscribeGpsInfoRequest)(nil), "mavsdk.rpc.telemetry.SubscribeGpsInfoRequest")
	proto.RegisterType((*GpsInfoResponse)(nil), "mavsdk.rpc.telemetry.GpsInfoResponse")
	proto.RegisterType((*SubscribeBatteryRequest)(nil), "mavsdk.rpc.telemetry.SubscribeBatteryRequest")
	proto.RegisterType((*BatteryResponse)(nil), "mavsdk.rpc.telemetry.BatteryResponse")
	proto.RegisterType((*SubscribeFlightModeRequest)(nil), "mavsdk.rpc.telemetry.SubscribeFlightModeRequest")
	proto.RegisterType((*FlightModeResponse)(nil), "mavsdk.rpc.telemetry.FlightModeResponse")
	proto.RegisterType((*SubscribeHealthRequest)(nil), "mavsdk.rpc.telemetry.SubscribeHealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "mavsdk.rpc.telemetry.HealthResponse")
	proto.RegisterType((*SubscribeRcStatusRequest)(nil), "mavsdk.rpc.telemetry.SubscribeRcStatusRequest")
	proto.RegisterType((*RcStatusResponse)(nil), "mavsdk.rpc.telemetry.RcStatusResponse")
	proto.RegisterType((*SubscribeStatusTextRequest)(nil), "mavsdk.rpc.telemetry.SubscribeStatusTextRequest")
	proto.RegisterType((*StatusTextResponse)(nil), "mavsdk.rpc.telemetry.StatusTextResponse")
	proto.RegisterType((*SubscribeActuatorControlTargetRequest)(nil), "mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest")
	proto.RegisterType((*ActuatorControlTargetResponse)(nil), "mavsdk.rpc.telemetry.ActuatorControlTargetResponse")
	proto.RegisterType((*SubscribeActuatorOutputStatusRequest)(nil), "mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest")
	proto.RegisterType((*ActuatorOutputStatusResponse)(nil), "mavsdk.rpc.telemetry.ActuatorOutputStatusResponse")
	proto.RegisterType((*SubscribeOdometryRequest)(nil), "mavsdk.rpc.telemetry.SubscribeOdometryRequest")
	proto.RegisterType((*OdometryResponse)(nil), "mavsdk.rpc.telemetry.OdometryResponse")
	proto.RegisterType((*Position)(nil), "mavsdk.rpc.telemetry.Position")
	proto.RegisterType((*Quaternion)(nil), "mavsdk.rpc.telemetry.Quaternion")
	proto.RegisterType((*EulerAngle)(nil), "mavsdk.rpc.telemetry.EulerAngle")
	proto.RegisterType((*AngularVelocityBody)(nil), "mavsdk.rpc.telemetry.AngularVelocityBody")
	proto.RegisterType((*SpeedNed)(nil), "mavsdk.rpc.telemetry.SpeedNed")
	proto.RegisterType((*GpsInfo)(nil), "mavsdk.rpc.telemetry.GpsInfo")
	proto.RegisterType((*Battery)(nil), "mavsdk.rpc.telemetry.Battery")
	proto.RegisterType((*Health)(nil), "mavsdk.rpc.telemetry.Health")
	proto.RegisterType((*RcStatus)(nil), "mavsdk.rpc.telemetry.RcStatus")
	proto.RegisterType((*StatusText)(nil), "mavsdk.rpc.telemetry.StatusText")
	proto.RegisterType((*ActuatorControlTarget)(nil), "mavsdk.rpc.telemetry.ActuatorControlTarget")
	proto.RegisterType((*ActuatorOutputStatus)(nil), "mavsdk.rpc.telemetry.ActuatorOutputStatus")
	proto.RegisterType((*Odometry)(nil), "mavsdk.rpc.telemetry.Odometry")
	proto.RegisterType((*Covariance)(nil), "mavsdk.rpc.telemetry.Covariance")
	proto.RegisterType((*SpeedBody)(nil), "mavsdk.rpc.telemetry.SpeedBody")
	proto.RegisterType((*PositionBody)(nil), "mavsdk.rpc.telemetry.PositionBody")
}

func init() {
	proto.RegisterFile("MAVSDK-Proto/protos/telemetry/telemetry.proto", fileDescriptor_92ffc2c517594509)
}

var fileDescriptor_92ffc2c517594509 = []byte{
	// 2539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x5b, 0x73, 0xdb, 0xc6,
	0xf5, 0x37, 0xa8, 0x0b, 0xa9, 0x23, 0x89, 0x86, 0x57, 0x92, 0xa5, 0x50, 0xb6, 0xe3, 0xc0, 0x71,
	0xe2, 0x48, 0xb1, 0x12, 0xcb, 0xf9, 0xe7, 0x9f, 0xcb, 0x34, 0x1d, 0x4a, 0x24, 0x65, 0x46, 0x22,
	0xe9, 0x80, 0x94, 0xed, 0xb4, 0x93, 0xd9, 0xac, 0xc8, 0x15, 0x85, 0x1a, 0x04, 0x68, 0x00, 0x94,
	0x44, 0x3d, 0x74, 0xda, 0x99, 0xf6, 0x31, 0x33, 0x9d, 0x49, 0xdb, 0xb7, 0x4e, 0x5f, 0xfb, 0xdc,
	0xe9, 0xc7, 0xea, 0x87, 0xe8, 0xec, 0x62, 0xb1, 0x00, 0x48, 0x80, 0x94, 0x67, 0xda, 0x17, 0xce,
	0xee, 0xb9, 0xfd, 0xce, 0x62, 0x2f, 0x67, 0xf7, 0x47, 0x78, 0x5c, 0x2b, 0xbe, 0x68, 0x96, 0x0e,
	0x1f, 0x3f, 0x77, 0x6c, 0xcf, 0xfe, 0xa4, 0xcf, 0x7e, 0xdd, 0x4f, 0x3c, 0x6a, 0xd2, 0x1e, 0xf5,
	0x9c, 0x61, 0xd8, 0xda, 0xe1, 0x2a, 0xb4, 0xda, 0x23, 0xe7, 0x6e, 0xe7, 0xf5, 0x8e, 0xd3, 0x6f,
	0xef, 0x48, 0x9d, 0x56, 0x80, 0x8d, 0xe6, 0xe0, 0xc4, 0x6d, 0x3b, 0xc6, 0x09, 0x7d, 0x6e, 0xbb,
	0x86, 0x67, 0xd8, 0x96, 0x4e, 0xdf, 0x0c, 0xa8, 0xeb, 0x69, 0x75, 0x50, 0x43, 0x91, 0xdb, 0xb7,
	0x2d, 0x97, 0xa2, 0xaf, 0x20, 0xd7, 0x17, 0xb2, 0x0d, 0xe5, 0xbe, 0xf2, 0x68, 0x71, 0xf7, 0xde,
	0x4e, 0x52, 0xe0, 0x1d, 0xe9, 0x29, 0xed, 0xb5, 0xdb, 0xb0, 0x2a, 0xb1, 0x9e, 0xd9, 0x3d, 0x1a,
	0xe0, 0xec, 0xc1, 0x92, 0xdf, 0x15, 0x18, 0xbb, 0x30, 0x7b, 0x66, 0xf7, 0xe8, 0x35, 0xe3, 0x73,
	0x5b, 0x6d, 0x1d, 0xd6, 0x64, 0xec, 0xaa, 0x55, 0x34, 0x9c, 0x20, 0xf8, 0x36, 0x2c, 0x8b, 0xbe,
	0x88, 0x5e, 0x80, 0x05, 0xc3, 0xc5, 0x86, 0x85, 0x89, 0xe1, 0x70, 0x88, 0x9c, 0x9e, 0x35, 0x5c,
	0x6e, 0xa3, 0xdd, 0x85, 0x4d, 0x19, 0xe5, 0x88, 0x58, 0x1d, 0xda, 0x69, 0x7a, 0xc4, 0x93, 0x89,
	0xfe, 0x1a, 0x56, 0x62, 0x52, 0x11, 0xb1, 0x04, 0x4b, 0x26, 0x17, 0x63, 0x97, 0xc9, 0x79, 0xd0,
	0xfc, 0xee, 0x7b, 0xc9, 0x79, 0x47, 0x03, 0x2c, 0x9a, 0x61, 0x27, 0x36, 0x82, 0xa2, 0xd3, 0xa3,
	0x9d, 0x00, 0x75, 0x0b, 0x96, 0x45, 0x5f, 0xe0, 0xbd, 0x03, 0x39, 0xc3, 0xc5, 0x84, 0xc9, 0xc2,
	0x01, 0x70, 0x13, 0xed, 0x7d, 0xd0, 0xc2, 0x20, 0x9e, 0x67, 0x78, 0x83, 0x0e, 0xfd, 0x6e, 0x40,
	0x3c, 0xea, 0x58, 0x91, 0x89, 0xb5, 0xa1, 0x90, 0xa4, 0x14, 0xe1, 0xbf, 0x83, 0x15, 0x22, 0xb4,
	0xf8, 0x8d, 0x54, 0x8b, 0xd9, 0xb8, 0x9f, 0x3c, 0xaa, 0x48, 0x18, 0x44, 0xc6, 0x42, 0x6b, 0xef,
	0xc2, 0xdd, 0xb1, 0xb4, 0xca, 0x03, 0x93, 0xca, 0x59, 0xfa, 0x11, 0xd6, 0x46, 0xe4, 0x22, 0x99,
	0x03, 0xc8, 0xcb, 0x64, 0x28, 0xd3, 0x4c, 0xce, 0x83, 0x3b, 0x17, 0xad, 0xae, 0x49, 0xf5, 0x65,
	0x12, 0x0d, 0xa8, 0x3d, 0x86, 0xed, 0xb1, 0x14, 0x8a, 0x56, 0x77, 0x60, 0x12, 0xe7, 0x05, 0x35,
	0xed, 0xb6, 0xe1, 0x0d, 0xf7, 0xec, 0xce, 0x30, 0x48, 0xe8, 0x2f, 0x0a, 0x3c, 0x98, 0x68, 0x26,
	0xf2, 0xb3, 0xe0, 0x9e, 0xcc, 0x8f, 0xf8, 0x76, 0xf8, 0x5c, 0x18, 0xe2, 0x13, 0xbb, 0x33, 0x14,
	0xf9, 0x7e, 0x94, 0x9c, 0x6f, 0x52, 0xe8, 0x4d, 0x92, 0x8e, 0xab, 0x6d, 0xc1, 0x23, 0x39, 0x8c,
	0x7d, 0xd2, 0xa3, 0x0e, 0x49, 0x9f, 0xe6, 0x01, 0xdc, 0x4f, 0x37, 0xf9, 0xdf, 0x4d, 0xf6, 0x43,
	0x78, 0x90, 0x92, 0x62, 0x6c, 0xca, 0x4f, 0x61, 0x33, 0x51, 0xfb, 0xdf, 0x9e, 0xf8, 0xfb, 0x70,
	0x4f, 0xa6, 0x73, 0xe0, 0xd8, 0x03, 0xab, 0xd3, 0xec, 0x53, 0xda, 0xa9, 0x87, 0x1b, 0xec, 0x04,
	0x6e, 0x8f, 0x2a, 0x44, 0x12, 0xcf, 0x40, 0xed, 0x72, 0x0d, 0x76, 0x99, 0x0a, 0x5b, 0x62, 0xc7,
	0xa5, 0x9e, 0x4a, 0x32, 0x42, 0xbe, 0x1b, 0x8b, 0xa8, 0xbd, 0x03, 0xeb, 0x61, 0x16, 0x7d, 0xb7,
	0x6a, 0x9d, 0xda, 0x01, 0xfc, 0x21, 0xdc, 0x94, 0x12, 0x81, 0xfb, 0x05, 0xe4, 0xba, 0x7d, 0x76,
	0x48, 0x9d, 0xda, 0x02, 0xef, 0x6e, 0x32, 0x5e, 0xe0, 0x98, 0xed, 0xfa, 0x8d, 0x18, 0xce, 0x1e,
	0xf1, 0x3c, 0xea, 0xc8, 0x25, 0xfd, 0x2d, 0xdc, 0x94, 0x12, 0x81, 0xf3, 0xff, 0x90, 0x3d, 0xf1,
	0x45, 0x93, 0x61, 0x02, 0xbf, 0xc0, 0x5a, 0xbb, 0x03, 0x05, 0x09, 0x53, 0x31, 0x8d, 0xee, 0x99,
	0x57, 0xb3, 0x3b, 0xf2, 0x9c, 0x7c, 0x09, 0x28, 0x2a, 0x14, 0x60, 0x45, 0x58, 0x3c, 0xe5, 0x52,
	0xdc, 0xb3, 0x3b, 0xc1, 0x29, 0x99, 0x32, 0x9d, 0x11, 0x77, 0x38, 0x95, 0x6d, 0x6d, 0x03, 0x6e,
	0x87, 0x15, 0x84, 0x12, 0xd3, 0x3b, 0x0b, 0x20, 0x2b, 0x90, 0x0f, 0x04, 0x02, 0xee, 0x33, 0x98,
	0x3f, 0xe3, 0x12, 0x31, 0xb4, 0x3b, 0xc9, 0x48, 0xc2, 0x4b, 0xd8, 0xc6, 0xea, 0xa1, 0xde, 0x66,
	0x27, 0xf3, 0xc0, 0x0d, 0x30, 0x1a, 0xa0, 0x86, 0x22, 0x81, 0xf2, 0x35, 0x2c, 0x38, 0x6d, 0x7e,
	0xee, 0x0f, 0xdc, 0xc9, 0x4b, 0x43, 0xba, 0xe6, 0x1c, 0xd1, 0x8a, 0x7d, 0x45, 0x5f, 0xd4, 0xa2,
	0x97, 0x5e, 0xe4, 0x2b, 0x46, 0x85, 0xe1, 0x57, 0xf4, 0xd1, 0xb0, 0x47, 0x2f, 0xbd, 0xc9, 0x9b,
	0x22, 0xe2, 0x0e, 0xae, 0x6c, 0x6b, 0x1f, 0xc2, 0xc3, 0xf0, 0x28, 0x6c, 0x7b, 0x03, 0xe2, 0xd9,
	0xce, 0xbe, 0x6d, 0x79, 0x8e, 0x6d, 0xb6, 0x88, 0xd3, 0xa5, 0x32, 0x83, 0x3f, 0x28, 0x70, 0x37,
	0xc5, 0x40, 0x64, 0xd3, 0x86, 0x75, 0x22, 0x0c, 0x70, 0xdb, 0xb7, 0xc0, 0x1e, 0x37, 0x11, 0x99,
	0x6d, 0xa7, 0x9c, 0x7b, 0x89, 0x51, 0xd7, 0x48, 0x92, 0x58, 0xfb, 0x00, 0xde, 0x1f, 0xcb, 0xb7,
	0x31, 0xf0, 0xfa, 0x03, 0x2f, 0x3e, 0x3f, 0xbf, 0x53, 0xe0, 0x4e, 0xb2, 0x5e, 0x64, 0xfb, 0x23,
	0xdc, 0x96, 0xd9, 0xda, 0xdc, 0x20, 0x3e, 0x73, 0x5b, 0x93, 0x93, 0x8d, 0xc5, 0x5c, 0x25, 0x09,
	0xd2, 0xd8, 0xf2, 0x69, 0x74, 0x6c, 0xee, 0x1f, 0xb9, 0x4e, 0x85, 0xa2, 0xf0, 0x3a, 0x65, 0x0b,
	0xd9, 0xe4, 0xd5, 0x23, 0x3d, 0xa5, 0xbd, 0xf6, 0x4f, 0x05, 0x72, 0xc1, 0x2d, 0x08, 0xbd, 0xc7,
	0xee, 0x20, 0xe2, 0xb8, 0xec, 0xd0, 0x2e, 0x0f, 0xa6, 0xb0, 0x0b, 0x86, 0x2f, 0x2b, 0xd1, 0x2e,
	0x7a, 0x00, 0xcb, 0xa6, 0x6d, 0x75, 0x43, 0x9b, 0x0c, 0xb7, 0x59, 0x92, 0x42, 0x66, 0xb4, 0x03,
	0x2b, 0xe4, 0xc4, 0xb5, 0xcd, 0x81, 0x47, 0x31, 0x31, 0x45, 0xc0, 0xde, 0xc6, 0xcc, 0x7d, 0xe5,
	0x51, 0x46, 0xbf, 0x15, 0xa8, 0x8a, 0x42, 0x53, 0x63, 0xf6, 0x0e, 0x65, 0x28, 0xe7, 0x31, 0xfb,
	0x59, 0xdf, 0x3e, 0x50, 0x49, 0x7b, 0xad, 0x04, 0x10, 0x96, 0x0a, 0xb4, 0x04, 0xca, 0x05, 0x4f,
	0x35, 0xa3, 0x2b, 0x17, 0xac, 0x77, 0xc9, 0x93, 0xca, 0xe8, 0xca, 0x25, 0xeb, 0x0d, 0x05, 0xae,
	0x32, 0x64, 0xbd, 0x2b, 0x11, 0x55, 0xb9, 0xd2, 0x7e, 0x00, 0x08, 0x0f, 0x7c, 0x76, 0x1f, 0x72,
	0x6c, 0xd3, 0x94, 0xe3, 0xce, 0xe8, 0x59, 0xd6, 0x67, 0xc3, 0xd9, 0x84, 0x85, 0xbe, 0xe1, 0xb5,
	0xcf, 0xe4, 0x78, 0x33, 0x7a, 0x8e, 0x0b, 0x98, 0x72, 0x1d, 0xb2, 0x43, 0x72, 0xc1, 0x55, 0x3e,
	0xce, 0xfc, 0x90, 0x5c, 0x94, 0x68, 0x57, 0xb3, 0x61, 0x25, 0xa1, 0xf6, 0xa2, 0x3b, 0x00, 0x1c,
	0xc7, 0x21, 0x1d, 0xec, 0x0a, 0x24, 0x8e, 0xac, 0x93, 0x4e, 0x13, 0xdd, 0x83, 0x45, 0x1f, 0xca,
	0x57, 0xfb, 0x60, 0x3e, 0x3a, 0xd7, 0x17, 0x60, 0x81, 0xa1, 0xf9, 0x5a, 0x1f, 0x8f, 0xc1, 0x33,
	0x9d, 0xf6, 0x93, 0x02, 0xb9, 0xa0, 0x54, 0xa0, 0x6d, 0x40, 0xf2, 0x06, 0x61, 0xd9, 0x8e, 0x77,
	0x86, 0x7b, 0x12, 0xee, 0x66, 0xa0, 0xa9, 0x33, 0x45, 0xad, 0x89, 0x3e, 0x82, 0x5b, 0xd2, 0x98,
	0x12, 0xd7, 0xe3, 0xb6, 0x3e, 0x76, 0x3e, 0x50, 0x94, 0x89, 0xeb, 0x8d, 0x98, 0x76, 0xec, 0x0b,
	0x8b, 0x9b, 0xce, 0xc4, 0x4d, 0x4b, 0xf6, 0x85, 0x55, 0x6b, 0x6a, 0xbf, 0x81, 0xac, 0xa8, 0x2c,
	0xe8, 0x21, 0xe4, 0xad, 0x41, 0x0f, 0xbb, 0xc4, 0xa3, 0xa6, 0x69, 0x78, 0xd4, 0xcf, 0x64, 0x4e,
	0x5f, 0xb6, 0x06, 0xbd, 0xa6, 0x14, 0xb2, 0x8a, 0x75, 0x6a, 0x5c, 0x62, 0x6f, 0xd8, 0xa7, 0x1c,
	0x3e, 0x9f, 0x56, 0x4a, 0x2a, 0xc6, 0x65, 0x6b, 0xd8, 0xa7, 0x7a, 0xf6, 0xd4, 0x6f, 0x68, 0x4d,
	0xc8, 0x8a, 0xf2, 0xc2, 0x66, 0xeb, 0xdc, 0x36, 0x3d, 0xd2, 0xa5, 0xf8, 0x3c, 0xf8, 0xbe, 0x42,
	0xf0, 0x02, 0x6d, 0xc3, 0x2d, 0x87, 0xf6, 0x88, 0x61, 0x19, 0x56, 0x17, 0xf7, 0xa9, 0xd3, 0xa6,
	0x96, 0x27, 0x46, 0xaa, 0x4a, 0xc5, 0x73, 0x5f, 0xae, 0xfd, 0x6d, 0x06, 0xe6, 0xfd, 0x93, 0x1d,
	0xfd, 0x02, 0x36, 0x0d, 0x17, 0x77, 0x87, 0x0e, 0xdb, 0x36, 0xd4, 0xc1, 0x6d, 0x62, 0x1a, 0x27,
	0x0e, 0x61, 0xbb, 0x06, 0xdb, 0xaf, 0xc5, 0x05, 0x7a, 0xc3, 0x70, 0x0f, 0x02, 0x8b, 0xfd, 0xd0,
	0xa0, 0xf1, 0x1a, 0x95, 0xe1, 0x5d, 0x76, 0xd9, 0x6e, 0xb7, 0xa9, 0x49, 0x53, 0x42, 0x64, 0x78,
	0x88, 0x3b, 0x86, 0x5b, 0x8c, 0x5a, 0xc5, 0xc3, 0xec, 0xc3, 0x3d, 0xc3, 0xc5, 0x3d, 0xd2, 0xb5,
	0xa8, 0x97, 0x1c, 0x65, 0x86, 0x47, 0xd9, 0x34, 0xdc, 0x5a, 0xc4, 0x28, 0x1e, 0xe4, 0xff, 0x60,
	0xdd, 0x70, 0xb1, 0x49, 0xcf, 0xa9, 0x39, 0xea, 0x3d, 0xcb, 0xbd, 0x57, 0x0d, 0xf7, 0x88, 0x69,
	0xe3, 0x6e, 0x9f, 0xc0, 0x2a, 0x73, 0xb3, 0xdb, 0xc4, 0xc4, 0xc1, 0x63, 0x8c, 0xf9, 0xcc, 0x71,
	0x9f, 0x5b, 0x86, 0x7b, 0xc4, 0x54, 0xc1, 0x51, 0xd2, 0x78, 0x8d, 0x9e, 0xc0, 0x1a, 0xfb, 0x64,
	0xa6, 0x7d, 0x32, 0xe2, 0x31, 0xcf, 0x3d, 0x90, 0xe1, 0x1e, 0x70, 0x5d, 0xc4, 0xe5, 0x31, 0xac,
	0x18, 0x2e, 0x66, 0x4f, 0xb1, 0x98, 0x43, 0x96, 0x3b, 0xa8, 0x86, 0xcb, 0x1e, 0x78, 0xa1, 0xb9,
	0xf6, 0xb3, 0x02, 0xb9, 0xa0, 0x20, 0xa2, 0x8f, 0x01, 0x5d, 0x10, 0x17, 0x93, 0x73, 0x62, 0x98,
	0xe4, 0xc4, 0xa4, 0xd8, 0xb6, 0xda, 0x54, 0x4c, 0x8c, 0x7a, 0x41, 0xdc, 0x62, 0xa0, 0x68, 0x58,
	0x6d, 0xca, 0x4e, 0x3a, 0x23, 0x62, 0x2c, 0xbe, 0xfe, 0xa2, 0x11, 0x9a, 0xa1, 0xcf, 0x61, 0xdd,
	0x35, 0xba, 0x16, 0x31, 0xb1, 0xeb, 0x39, 0xd4, 0xea, 0x7a, 0x67, 0x72, 0xc1, 0xf8, 0xeb, 0x7d,
	0xcd, 0x57, 0x37, 0x85, 0x36, 0x58, 0x35, 0x7f, 0x56, 0x00, 0xc2, 0x9a, 0x89, 0x7e, 0x09, 0xb3,
	0x7c, 0x3d, 0xfb, 0x37, 0x95, 0xed, 0x69, 0x35, 0x36, 0x68, 0xb2, 0xd5, 0xcd, 0x1d, 0x11, 0x82,
	0x59, 0x5e, 0xa4, 0x59, 0x8a, 0x0b, 0x3a, 0x6f, 0x6b, 0x4f, 0x24, 0x04, 0xb3, 0xc8, 0xc1, 0x6c,
	0xb5, 0x5e, 0x69, 0xa8, 0x37, 0xd0, 0x22, 0x64, 0x5f, 0x16, 0xf5, 0x7a, 0xb5, 0x7e, 0xa0, 0x2a,
	0x68, 0x09, 0x72, 0xfb, 0x7a, 0xb5, 0x55, 0xdd, 0x2f, 0x1e, 0xa9, 0x19, 0xad, 0x0a, 0x6b, 0x89,
	0xf5, 0x12, 0xad, 0xc2, 0x1c, 0xbb, 0x66, 0xf6, 0xc5, 0x96, 0xf4, 0x3b, 0xa8, 0x00, 0x39, 0x51,
	0x8a, 0xd9, 0x49, 0x30, 0xc3, 0x36, 0x51, 0xd0, 0xd7, 0xbe, 0x85, 0xd5, 0xa4, 0x6a, 0x86, 0x6e,
	0xc3, 0x3c, 0x69, 0xb3, 0x93, 0x9a, 0x87, 0x5a, 0xd6, 0x45, 0x8f, 0xc5, 0x0a, 0xea, 0x5c, 0x10,
	0x2b, 0xe8, 0x6b, 0xff, 0x9a, 0x83, 0x5c, 0x50, 0x96, 0xd8, 0xd6, 0xf5, 0x8c, 0x1e, 0xc5, 0x03,
	0x97, 0xb6, 0x79, 0x8c, 0x59, 0x3d, 0xc7, 0x04, 0xc7, 0x2e, 0x6d, 0xa3, 0x3d, 0xc8, 0x9d, 0x3a,
	0xa4, 0x47, 0xb1, 0xd1, 0x11, 0x87, 0xc3, 0x87, 0x93, 0xab, 0xdc, 0x4e, 0x8d, 0x9c, 0x57, 0x98,
	0x87, 0x9e, 0xe5, 0x8e, 0xd5, 0x0e, 0xaa, 0x41, 0xbe, 0x7d, 0x66, 0x98, 0x1d, 0x2c, 0x23, 0xcd,
	0xbc, 0x5d, 0xa4, 0x25, 0xee, 0x5e, 0x11, 0xe1, 0x0e, 0x60, 0x59, 0xae, 0x53, 0xfe, 0x4c, 0x9b,
	0xe5, 0xd5, 0x57, 0x9b, 0x4c, 0x36, 0xf0, 0xf7, 0xd9, 0x52, 0x3f, 0xd2, 0x43, 0x3b, 0xa0, 0xbc,
	0xe1, 0x3b, 0xe9, 0x3a, 0xcf, 0x25, 0xe5, 0x0d, 0xfa, 0x06, 0xc0, 0x7f, 0x4b, 0x70, 0xd4, 0x79,
	0xee, 0xf8, 0xee, 0x84, 0xc7, 0x04, 0x87, 0x5c, 0x70, 0x83, 0x26, 0xfa, 0x01, 0xd6, 0x92, 0xdf,
	0x99, 0xd9, 0xb7, 0x7d, 0x67, 0xae, 0x90, 0x84, 0x1a, 0x57, 0x85, 0x9b, 0x7d, 0xdb, 0xa5, 0xb8,
	0x6d, 0x9f, 0x13, 0xc7, 0x20, 0x6c, 0x23, 0xe6, 0x26, 0x0d, 0x6e, 0x5f, 0xda, 0xe9, 0x79, 0xe6,
	0x18, 0xf6, 0xd9, 0xd3, 0x52, 0x66, 0x18, 0x09, 0xb7, 0x70, 0xcd, 0x70, 0xb2, 0x08, 0x86, 0x32,
	0x6d, 0x0f, 0x72, 0xc1, 0x7c, 0xa2, 0x05, 0x98, 0x3b, 0xae, 0x97, 0xca, 0x15, 0xf5, 0x06, 0xdb,
	0x2e, 0x7b, 0x8d, 0xd2, 0xf7, 0xb8, 0x5e, 0x2e, 0xa9, 0x39, 0x94, 0x07, 0x78, 0x51, 0x6d, 0x56,
	0x1b, 0x75, 0xde, 0x57, 0xd1, 0x32, 0x2c, 0x94, 0x9b, 0xad, 0x6a, 0x8d, 0x77, 0x91, 0xf6, 0x25,
	0x40, 0x24, 0xc9, 0x6d, 0xb8, 0x15, 0xe6, 0x86, 0x7b, 0xc4, 0x73, 0x8c, 0xcb, 0x0d, 0x85, 0xaf,
	0x74, 0x35, 0x54, 0xd4, 0xb8, 0x5c, 0xbb, 0x82, 0x05, 0x39, 0x27, 0xe8, 0x01, 0xc8, 0xaa, 0x89,
	0x2f, 0x23, 0x25, 0x7a, 0x31, 0x90, 0xbe, 0xaa, 0x35, 0x63, 0x46, 0xc3, 0x48, 0x6d, 0x96, 0x46,
	0xdf, 0x8f, 0x18, 0x5d, 0x45, 0xaa, 0xb2, 0x34, 0xfa, 0x55, 0xad, 0xa9, 0x15, 0x61, 0x29, 0xba,
	0x0a, 0xd1, 0x4d, 0x98, 0xb9, 0xc4, 0x3d, 0x81, 0x99, 0xb9, 0xac, 0x31, 0xc1, 0x10, 0xf7, 0x44,
	0xfc, 0xcc, 0x90, 0x0b, 0xae, 0xe4, 0xd5, 0x2d, 0x73, 0x55, 0xdb, 0xa2, 0x90, 0x15, 0xd5, 0x17,
	0x01, 0xcc, 0xd7, 0x1b, 0xf8, 0xe0, 0x79, 0x53, 0xbd, 0x21, 0xda, 0x95, 0xea, 0x2b, 0x55, 0x61,
	0xed, 0x4a, 0xf5, 0x15, 0xde, 0x2d, 0xa9, 0x99, 0xa0, 0xfd, 0xb4, 0xa4, 0xce, 0xb0, 0x2f, 0xcc,
	0xda, 0x25, 0xe6, 0x31, 0xcb, 0xbe, 0xa8, 0xde, 0x3a, 0xc4, 0x95, 0xa3, 0x46, 0xb1, 0xa5, 0xce,
	0xc9, 0x6e, 0xf5, 0x55, 0xb9, 0xa4, 0xce, 0x6f, 0xfd, 0x51, 0x01, 0x08, 0xdf, 0x6f, 0xec, 0x60,
	0x3b, 0xae, 0x1f, 0xd6, 0x1b, 0x2f, 0xeb, 0xea, 0x0d, 0x36, 0x69, 0x7a, 0xb9, 0x58, 0xfa, 0x5e,
	0x55, 0x98, 0xbc, 0x55, 0x3c, 0x2c, 0x37, 0x2a, 0x15, 0x35, 0xc3, 0xce, 0xc1, 0x67, 0x8d, 0x23,
	0x86, 0xb4, 0x08, 0xd9, 0x5a, 0xb5, 0xc9, 0xa6, 0x4f, 0x9d, 0x45, 0xab, 0xa0, 0xea, 0xe5, 0xd6,
	0xb1, 0x5e, 0xc7, 0xad, 0x06, 0x3e, 0x2a, 0x1e, 0xd7, 0xf7, 0x9f, 0xa9, 0x73, 0xcc, 0xf8, 0xa8,
	0x58, 0x2f, 0xa9, 0xf3, 0x2c, 0xad, 0x46, 0xa5, 0xb2, 0xd7, 0x28, 0xea, 0x25, 0x35, 0xcb, 0xf2,
	0xa8, 0x34, 0x8e, 0x8e, 0x1a, 0x2f, 0x71, 0xad, 0xac, 0xe6, 0xb6, 0x7e, 0x56, 0x60, 0x31, 0xc2,
	0xb6, 0xa1, 0x0d, 0x58, 0x65, 0x6e, 0xe5, 0x12, 0x6e, 0xb6, 0x8a, 0xad, 0x32, 0x0e, 0xb3, 0x2a,
	0xc0, 0xed, 0x98, 0xa6, 0x51, 0xc7, 0x07, 0x7a, 0xe3, 0xb8, 0x5e, 0x52, 0x15, 0xb4, 0x0e, 0x2b,
	0x31, 0x5d, 0xb5, 0x8e, 0x8b, 0x55, 0x5d, 0xcd, 0xa0, 0x4d, 0x58, 0x8f, 0x29, 0x5a, 0xc5, 0xc3,
	0x6a, 0xfd, 0x00, 0xb3, 0xf1, 0xcc, 0x8c, 0x61, 0xb1, 0x0e, 0x3b, 0xda, 0x67, 0x77, 0xff, 0xbd,
	0x02, 0x6a, 0x2b, 0x58, 0xef, 0x4d, 0xea, 0x9c, 0x1b, 0x6d, 0x8a, 0x6c, 0xb8, 0x35, 0xc6, 0xc2,
	0xa2, 0x9d, 0x94, 0x53, 0x21, 0x85, 0xae, 0x2d, 0x7c, 0x30, 0x85, 0x28, 0x15, 0x6f, 0x0e, 0xed,
	0xc6, 0xa7, 0x0a, 0x6a, 0xc3, 0x72, 0x8c, 0x8a, 0x45, 0x5b, 0x53, 0xc0, 0x22, 0x7c, 0x6d, 0x21,
	0xe5, 0x90, 0x8c, 0x72, 0xb8, 0x1c, 0xe4, 0x14, 0xf2, 0x71, 0x4e, 0x16, 0x6d, 0x4f, 0x41, 0x89,
	0x32, 0xb7, 0x85, 0x07, 0xc9, 0xc6, 0x31, 0x36, 0x97, 0xe3, 0x5c, 0x46, 0x78, 0xe5, 0xe8, 0x84,
	0x3f, 0x99, 0x82, 0x36, 0xce, 0xf0, 0x16, 0x3e, 0x9a, 0x4e, 0xda, 0xa6, 0x8d, 0x90, 0x13, 0xb0,
	0x53, 0x47, 0x18, 0x65, 0x76, 0xd3, 0x46, 0x18, 0x63, 0x7b, 0x39, 0xce, 0x4f, 0x4a, 0x84, 0x98,
	0x1e, 0x67, 0xf3, 0xd0, 0x17, 0xd3, 0x50, 0xd3, 0x38, 0xc2, 0xc2, 0xa7, 0x29, 0x29, 0xa4, 0x32,
	0x86, 0x3c, 0x9f, 0xdf, 0x46, 0x78, 0x98, 0x18, 0x7d, 0x87, 0x9e, 0x5e, 0x33, 0x93, 0x28, 0x15,
	0x58, 0xd8, 0x9e, 0x9c, 0x44, 0x8c, 0x18, 0xe4, 0xf8, 0xff, 0x50, 0xa2, 0x94, 0x40, 0x3a, 0x5d,
	0x8a, 0x8a, 0xd7, 0x4c, 0x27, 0x9d, 0x09, 0x2e, 0x7c, 0x39, 0x39, 0xb9, 0x09, 0xe4, 0x30, 0x4f,
	0xf5, 0xef, 0x0a, 0xbc, 0x37, 0x95, 0xb1, 0x45, 0xdf, 0x4c, 0xc9, 0x73, 0x0a, 0xd5, 0x5b, 0xf8,
	0x3c, 0xa5, 0x9c, 0x4e, 0xa1, 0x7f, 0x79, 0x86, 0x7f, 0x52, 0xe0, 0xce, 0x24, 0xc2, 0x16, 0x7d,
	0xf9, 0x56, 0xc9, 0xc5, 0x66, 0xf6, 0xc9, 0x75, 0xf2, 0x1a, 0x9f, 0xdf, 0xdf, 0x2b, 0x51, 0xba,
	0x34, 0xc6, 0xa4, 0xa2, 0xcf, 0xa6, 0x64, 0x93, 0xc8, 0xf1, 0x16, 0x3e, 0x4e, 0xe1, 0x4f, 0x13,
	0x79, 0x5f, 0x9e, 0x83, 0x09, 0xea, 0x28, 0x63, 0x8b, 0x1e, 0x4f, 0xc3, 0x8e, 0x31, 0xbb, 0x85,
	0x87, 0x93, 0x49, 0xdb, 0x34, 0xb4, 0xe0, 0x39, 0x3c, 0x0d, 0x2d, 0xce, 0xef, 0xa6, 0xa1, 0x8d,
	0x70, 0xbe, 0x1c, 0x6d, 0x00, 0x2b, 0x09, 0xf4, 0x2d, 0xfa, 0x74, 0x0a, 0xe0, 0x18, 0xd3, 0x5b,
	0x78, 0x34, 0x95, 0xbe, 0x8d, 0xc2, 0x1a, 0x70, 0x73, 0x84, 0xbe, 0x45, 0x1f, 0x4f, 0xab, 0x3b,
	0x51, 0x96, 0xb7, 0xf0, 0xfe, 0x44, 0x0e, 0x37, 0x0a, 0x15, 0xad, 0xa8, 0xf2, 0xa1, 0x39, 0xad,
	0xa2, 0x8e, 0x10, 0xbe, 0x69, 0x15, 0x75, 0x94, 0x04, 0x1e, 0xfb, 0xa4, 0x91, 0x37, 0xe4, 0xb4,
	0x4f, 0x3a, 0x46, 0xfb, 0xa6, 0x7d, 0xd2, 0x71, 0x2a, 0x98, 0xc3, 0xfe, 0x55, 0x89, 0xfc, 0xbd,
	0x91, 0xfc, 0x4a, 0xfc, 0x7a, 0xda, 0x19, 0x38, 0x81, 0x02, 0x2e, 0x3c, 0x7d, 0x1b, 0xfe, 0x36,
	0x9a, 0xd8, 0xcf, 0x4a, 0xf4, 0x3f, 0xbf, 0xa4, 0x37, 0xe7, 0x57, 0xd7, 0xcc, 0x2b, 0x81, 0xea,
	0x2d, 0xec, 0xbe, 0x05, 0x53, 0x9b, 0xb6, 0x2c, 0xe4, 0xdb, 0x75, 0xda, 0xb2, 0x18, 0x21, 0x72,
	0xd3, 0x96, 0xc5, 0x28, 0xb9, 0xcb, 0x00, 0xf7, 0x1e, 0xc2, 0x8a, 0x61, 0x07, 0xf6, 0xd2, 0x76,
	0x2f, 0x2f, 0xaf, 0x80, 0xfc, 0xdf, 0xfb, 0x93, 0x79, 0xfe, 0x1f, 0xfd, 0xd3, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x90, 0x51, 0x04, 0xd4, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// Subscribe to 'position' updates.
	SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionClient, error)
	// Subscribe to 'home position' updates.
	SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHomeClient, error)
	// Subscribe to in-air updates.
	SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeInAirClient, error)
	// Subscribe to landed state updates
	SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeLandedStateClient, error)
	// Subscribe to armed updates.
	SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeArmedClient, error)
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeQuaternionClient, error)
	// Subscribe to 'attitude' updates (euler).
	SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeEulerClient, error)
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeAngularVelocityBodyClient, error)
	// Subscribe to 'camera attitude' updates (quaternion).
	SubscribeCameraAttitudeQuaternion(ctx context.Context, in *SubscribeCameraAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeQuaternionClient, error)
	// Subscribe to 'camera attitude' updates (euler).
	SubscribeCameraAttitudeEuler(ctx context.Context, in *SubscribeCameraAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeEulerClient, error)
	// Subscribe to 'ground speed' updates (NED).
	SubscribeGroundSpeedNed(ctx context.Context, in *SubscribeGroundSpeedNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGroundSpeedNedClient, error)
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGpsInfoClient, error)
	// Subscribe to 'battery' updates.
	SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeBatteryClient, error)
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFlightModeClient, error)
	// Subscribe to 'health' updates.
	SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthClient, error)
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRcStatusClient, error)
	// Subscribe to 'status text' updates.
	SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeStatusTextClient, error)
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorControlTargetClient, error)
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorOutputStatusClient, error)
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeOdometryClient, error)
}

type telemetryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryServiceClient(cc *grpc.ClientConn) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[0], "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribePositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribePositionClient interface {
	Recv() (*PositionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribePositionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribePositionClient) Recv() (*PositionResponse, error) {
	m := new(PositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[1], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHomeClient interface {
	Recv() (*HomeResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHomeClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHomeClient) Recv() (*HomeResponse, error) {
	m := new(HomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeInAirClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[2], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeInAirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeInAirClient interface {
	Recv() (*InAirResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeInAirClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeInAirClient) Recv() (*InAirResponse, error) {
	m := new(InAirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeLandedStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[3], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeLandedStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeLandedStateClient interface {
	Recv() (*LandedStateResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeLandedStateClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeLandedStateClient) Recv() (*LandedStateResponse, error) {
	m := new(LandedStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeArmedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[4], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeArmedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeArmedClient interface {
	Recv() (*ArmedResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeArmedClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeArmedClient) Recv() (*ArmedResponse, error) {
	m := new(ArmedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeQuaternionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[5], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeQuaternionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeQuaternionClient interface {
	Recv() (*AttitudeQuaternionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeQuaternionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeQuaternionClient) Recv() (*AttitudeQuaternionResponse, error) {
	m := new(AttitudeQuaternionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeEulerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[6], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeEulerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeEulerClient interface {
	Recv() (*AttitudeEulerResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeEulerClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeEulerClient) Recv() (*AttitudeEulerResponse, error) {
	m := new(AttitudeEulerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeAngularVelocityBodyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[7], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeAngularVelocityBodyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeAngularVelocityBodyClient interface {
	Recv() (*AttitudeAngularVelocityBodyResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeAngularVelocityBodyClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeAngularVelocityBodyClient) Recv() (*AttitudeAngularVelocityBodyResponse, error) {
	m := new(AttitudeAngularVelocityBodyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeCameraAttitudeQuaternion(ctx context.Context, in *SubscribeCameraAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeQuaternionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[8], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeCameraAttitudeQuaternionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeCameraAttitudeQuaternionClient interface {
	Recv() (*CameraAttitudeQuaternionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeCameraAttitudeQuaternionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeCameraAttitudeQuaternionClient) Recv() (*CameraAttitudeQuaternionResponse, error) {
	m := new(CameraAttitudeQuaternionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeCameraAttitudeEuler(ctx context.Context, in *SubscribeCameraAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeEulerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[9], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeCameraAttitudeEulerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeCameraAttitudeEulerClient interface {
	Recv() (*CameraAttitudeEulerResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeCameraAttitudeEulerClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeCameraAttitudeEulerClient) Recv() (*CameraAttitudeEulerResponse, error) {
	m := new(CameraAttitudeEulerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeGroundSpeedNed(ctx context.Context, in *SubscribeGroundSpeedNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGroundSpeedNedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[10], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNed", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeGroundSpeedNedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeGroundSpeedNedClient interface {
	Recv() (*GroundSpeedNedResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeGroundSpeedNedClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeGroundSpeedNedClient) Recv() (*GroundSpeedNedResponse, error) {
	m := new(GroundSpeedNedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGpsInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[11], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeGpsInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeGpsInfoClient interface {
	Recv() (*GpsInfoResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeGpsInfoClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeGpsInfoClient) Recv() (*GpsInfoResponse, error) {
	m := new(GpsInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeBatteryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[12], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeBatteryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeBatteryClient interface {
	Recv() (*BatteryResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeBatteryClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeBatteryClient) Recv() (*BatteryResponse, error) {
	m := new(BatteryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFlightModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[13], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeFlightModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeFlightModeClient interface {
	Recv() (*FlightModeResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeFlightModeClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeFlightModeClient) Recv() (*FlightModeResponse, error) {
	m := new(FlightModeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[14], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHealthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHealthClient interface {
	Recv() (*HealthResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHealthClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHealthClient) Recv() (*HealthResponse, error) {
	m := new(HealthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRcStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[15], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeRcStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeRcStatusClient interface {
	Recv() (*RcStatusResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeRcStatusClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeRcStatusClient) Recv() (*RcStatusResponse, error) {
	m := new(RcStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeStatusTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[16], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeStatusTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeStatusTextClient interface {
	Recv() (*StatusTextResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeStatusTextClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeStatusTextClient) Recv() (*StatusTextResponse, error) {
	m := new(StatusTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorControlTargetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[17], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeActuatorControlTargetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeActuatorControlTargetClient interface {
	Recv() (*ActuatorControlTargetResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeActuatorControlTargetClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeActuatorControlTargetClient) Recv() (*ActuatorControlTargetResponse, error) {
	m := new(ActuatorControlTargetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorOutputStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[18], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeActuatorOutputStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeActuatorOutputStatusClient interface {
	Recv() (*ActuatorOutputStatusResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeActuatorOutputStatusClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeActuatorOutputStatusClient) Recv() (*ActuatorOutputStatusResponse, error) {
	m := new(ActuatorOutputStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeOdometryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[19], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeOdometryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeOdometryClient interface {
	Recv() (*OdometryResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeOdometryClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeOdometryClient) Recv() (*OdometryResponse, error) {
	m := new(OdometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
type TelemetryServiceServer interface {
	// Subscribe to 'position' updates.
	SubscribePosition(*SubscribePositionRequest, TelemetryService_SubscribePositionServer) error
	// Subscribe to 'home position' updates.
	SubscribeHome(*SubscribeHomeRequest, TelemetryService_SubscribeHomeServer) error
	// Subscribe to in-air updates.
	SubscribeInAir(*SubscribeInAirRequest, TelemetryService_SubscribeInAirServer) error
	// Subscribe to landed state updates
	SubscribeLandedState(*SubscribeLandedStateRequest, TelemetryService_SubscribeLandedStateServer) error
	// Subscribe to armed updates.
	SubscribeArmed(*SubscribeArmedRequest, TelemetryService_SubscribeArmedServer) error
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(*SubscribeAttitudeQuaternionRequest, TelemetryService_SubscribeAttitudeQuaternionServer) error
	// Subscribe to 'attitude' updates (euler).
	SubscribeAttitudeEuler(*SubscribeAttitudeEulerRequest, TelemetryService_SubscribeAttitudeEulerServer) error
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(*SubscribeAttitudeAngularVelocityBodyRequest, TelemetryService_SubscribeAttitudeAngularVelocityBodyServer) error
	// Subscribe to 'camera attitude' updates (quaternion).
	SubscribeCameraAttitudeQuaternion(*SubscribeCameraAttitudeQuaternionRequest, TelemetryService_SubscribeCameraAttitudeQuaternionServer) error
	// Subscribe to 'camera attitude' updates (euler).
	SubscribeCameraAttitudeEuler(*SubscribeCameraAttitudeEulerRequest, TelemetryService_SubscribeCameraAttitudeEulerServer) error
	// Subscribe to 'ground speed' updates (NED).
	SubscribeGroundSpeedNed(*SubscribeGroundSpeedNedRequest, TelemetryService_SubscribeGroundSpeedNedServer) error
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(*SubscribeGpsInfoRequest, TelemetryService_SubscribeGpsInfoServer) error
	// Subscribe to 'battery' updates.
	SubscribeBattery(*SubscribeBatteryRequest, TelemetryService_SubscribeBatteryServer) error
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(*SubscribeFlightModeRequest, TelemetryService_SubscribeFlightModeServer) error
	// Subscribe to 'health' updates.
	SubscribeHealth(*SubscribeHealthRequest, TelemetryService_SubscribeHealthServer) error
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(*SubscribeRcStatusRequest, TelemetryService_SubscribeRcStatusServer) error
	// Subscribe to 'status text' updates.
	SubscribeStatusText(*SubscribeStatusTextRequest, TelemetryService_SubscribeStatusTextServer) error
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(*SubscribeActuatorControlTargetRequest, TelemetryService_SubscribeActuatorControlTargetServer) error
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(*SubscribeActuatorOutputStatusRequest, TelemetryService_SubscribeActuatorOutputStatusServer) error
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(*SubscribeOdometryRequest, TelemetryService_SubscribeOdometryServer) error
}

// UnimplementedTelemetryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (*UnimplementedTelemetryServiceServer) SubscribePosition(req *SubscribePositionRequest, srv TelemetryService_SubscribePositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePosition not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeHome(req *SubscribeHomeRequest, srv TelemetryService_SubscribeHomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHome not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeInAir(req *SubscribeInAirRequest, srv TelemetryService_SubscribeInAirServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeInAir not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeLandedState(req *SubscribeLandedStateRequest, srv TelemetryService_SubscribeLandedStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLandedState not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeArmed(req *SubscribeArmedRequest, srv TelemetryService_SubscribeArmedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArmed not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeAttitudeQuaternion(req *SubscribeAttitudeQuaternionRequest, srv TelemetryService_SubscribeAttitudeQuaternionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeQuaternion not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeAttitudeEuler(req *SubscribeAttitudeEulerRequest, srv TelemetryService_SubscribeAttitudeEulerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeEuler not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeAttitudeAngularVelocityBody(req *SubscribeAttitudeAngularVelocityBodyRequest, srv TelemetryService_SubscribeAttitudeAngularVelocityBodyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeAngularVelocityBody not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeCameraAttitudeQuaternion(req *SubscribeCameraAttitudeQuaternionRequest, srv TelemetryService_SubscribeCameraAttitudeQuaternionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCameraAttitudeQuaternion not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeCameraAttitudeEuler(req *SubscribeCameraAttitudeEulerRequest, srv TelemetryService_SubscribeCameraAttitudeEulerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCameraAttitudeEuler not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeGroundSpeedNed(req *SubscribeGroundSpeedNedRequest, srv TelemetryService_SubscribeGroundSpeedNedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGroundSpeedNed not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeGpsInfo(req *SubscribeGpsInfoRequest, srv TelemetryService_SubscribeGpsInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGpsInfo not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeBattery(req *SubscribeBatteryRequest, srv TelemetryService_SubscribeBatteryServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBattery not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeFlightMode(req *SubscribeFlightModeRequest, srv TelemetryService_SubscribeFlightModeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFlightMode not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeHealth(req *SubscribeHealthRequest, srv TelemetryService_SubscribeHealthServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHealth not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeRcStatus(req *SubscribeRcStatusRequest, srv TelemetryService_SubscribeRcStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRcStatus not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeStatusText(req *SubscribeStatusTextRequest, srv TelemetryService_SubscribeStatusTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStatusText not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeActuatorControlTarget(req *SubscribeActuatorControlTargetRequest, srv TelemetryService_SubscribeActuatorControlTargetServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorControlTarget not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeActuatorOutputStatus(req *SubscribeActuatorOutputStatusRequest, srv TelemetryService_SubscribeActuatorOutputStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorOutputStatus not implemented")
}
func (*UnimplementedTelemetryServiceServer) SubscribeOdometry(req *SubscribeOdometryRequest, srv TelemetryService_SubscribeOdometryServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOdometry not implemented")
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_SubscribePosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribePosition(m, &telemetryServiceSubscribePositionServer{stream})
}

type TelemetryService_SubscribePositionServer interface {
	Send(*PositionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribePositionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribePositionServer) Send(m *PositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHome(m, &telemetryServiceSubscribeHomeServer{stream})
}

type TelemetryService_SubscribeHomeServer interface {
	Send(*HomeResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHomeServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHomeServer) Send(m *HomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeInAir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInAirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeInAir(m, &telemetryServiceSubscribeInAirServer{stream})
}

type TelemetryService_SubscribeInAirServer interface {
	Send(*InAirResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeInAirServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeInAirServer) Send(m *InAirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeLandedState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLandedStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeLandedState(m, &telemetryServiceSubscribeLandedStateServer{stream})
}

type TelemetryService_SubscribeLandedStateServer interface {
	Send(*LandedStateResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeLandedStateServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeLandedStateServer) Send(m *LandedStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeArmed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArmedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeArmed(m, &telemetryServiceSubscribeArmedServer{stream})
}

type TelemetryService_SubscribeArmedServer interface {
	Send(*ArmedResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeArmedServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeArmedServer) Send(m *ArmedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeQuaternion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeQuaternionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeQuaternion(m, &telemetryServiceSubscribeAttitudeQuaternionServer{stream})
}

type TelemetryService_SubscribeAttitudeQuaternionServer interface {
	Send(*AttitudeQuaternionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeQuaternionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeQuaternionServer) Send(m *AttitudeQuaternionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeEuler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeEulerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeEuler(m, &telemetryServiceSubscribeAttitudeEulerServer{stream})
}

type TelemetryService_SubscribeAttitudeEulerServer interface {
	Send(*AttitudeEulerResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeEulerServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeEulerServer) Send(m *AttitudeEulerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeAngularVelocityBodyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeAngularVelocityBody(m, &telemetryServiceSubscribeAttitudeAngularVelocityBodyServer{stream})
}

type TelemetryService_SubscribeAttitudeAngularVelocityBodyServer interface {
	Send(*AttitudeAngularVelocityBodyResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeAngularVelocityBodyServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeAngularVelocityBodyServer) Send(m *AttitudeAngularVelocityBodyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeCameraAttitudeQuaternion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCameraAttitudeQuaternionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeCameraAttitudeQuaternion(m, &telemetryServiceSubscribeCameraAttitudeQuaternionServer{stream})
}

type TelemetryService_SubscribeCameraAttitudeQuaternionServer interface {
	Send(*CameraAttitudeQuaternionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeCameraAttitudeQuaternionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeCameraAttitudeQuaternionServer) Send(m *CameraAttitudeQuaternionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeCameraAttitudeEuler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCameraAttitudeEulerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeCameraAttitudeEuler(m, &telemetryServiceSubscribeCameraAttitudeEulerServer{stream})
}

type TelemetryService_SubscribeCameraAttitudeEulerServer interface {
	Send(*CameraAttitudeEulerResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeCameraAttitudeEulerServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeCameraAttitudeEulerServer) Send(m *CameraAttitudeEulerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeGroundSpeedNed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGroundSpeedNedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGroundSpeedNed(m, &telemetryServiceSubscribeGroundSpeedNedServer{stream})
}

type TelemetryService_SubscribeGroundSpeedNedServer interface {
	Send(*GroundSpeedNedResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeGroundSpeedNedServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeGroundSpeedNedServer) Send(m *GroundSpeedNedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeGpsInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGpsInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGpsInfo(m, &telemetryServiceSubscribeGpsInfoServer{stream})
}

type TelemetryService_SubscribeGpsInfoServer interface {
	Send(*GpsInfoResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeGpsInfoServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeGpsInfoServer) Send(m *GpsInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeBattery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBatteryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeBattery(m, &telemetryServiceSubscribeBatteryServer{stream})
}

type TelemetryService_SubscribeBatteryServer interface {
	Send(*BatteryResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeBatteryServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeBatteryServer) Send(m *BatteryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeFlightMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFlightModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeFlightMode(m, &telemetryServiceSubscribeFlightModeServer{stream})
}

type TelemetryService_SubscribeFlightModeServer interface {
	Send(*FlightModeResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeFlightModeServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeFlightModeServer) Send(m *FlightModeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHealth(m, &telemetryServiceSubscribeHealthServer{stream})
}

type TelemetryService_SubscribeHealthServer interface {
	Send(*HealthResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHealthServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHealthServer) Send(m *HealthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeRcStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRcStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRcStatus(m, &telemetryServiceSubscribeRcStatusServer{stream})
}

type TelemetryService_SubscribeRcStatusServer interface {
	Send(*RcStatusResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeRcStatusServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeRcStatusServer) Send(m *RcStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeStatusText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStatusTextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeStatusText(m, &telemetryServiceSubscribeStatusTextServer{stream})
}

type TelemetryService_SubscribeStatusTextServer interface {
	Send(*StatusTextResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeStatusTextServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeStatusTextServer) Send(m *StatusTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeActuatorControlTarget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorControlTargetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorControlTarget(m, &telemetryServiceSubscribeActuatorControlTargetServer{stream})
}

type TelemetryService_SubscribeActuatorControlTargetServer interface {
	Send(*ActuatorControlTargetResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeActuatorControlTargetServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeActuatorControlTargetServer) Send(m *ActuatorControlTargetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeActuatorOutputStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorOutputStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorOutputStatus(m, &telemetryServiceSubscribeActuatorOutputStatusServer{stream})
}

type TelemetryService_SubscribeActuatorOutputStatusServer interface {
	Send(*ActuatorOutputStatusResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeActuatorOutputStatusServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeActuatorOutputStatusServer) Send(m *ActuatorOutputStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeOdometry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOdometryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeOdometry(m, &telemetryServiceSubscribeOdometryServer{stream})
}

type TelemetryService_SubscribeOdometryServer interface {
	Send(*OdometryResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeOdometryServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeOdometryServer) Send(m *OdometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePosition",
			Handler:       _TelemetryService_SubscribePosition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHome",
			Handler:       _TelemetryService_SubscribeHome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeInAir",
			Handler:       _TelemetryService_SubscribeInAir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeLandedState",
			Handler:       _TelemetryService_SubscribeLandedState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeArmed",
			Handler:       _TelemetryService_SubscribeArmed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeQuaternion",
			Handler:       _TelemetryService_SubscribeAttitudeQuaternion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeEuler",
			Handler:       _TelemetryService_SubscribeAttitudeEuler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeAngularVelocityBody",
			Handler:       _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCameraAttitudeQuaternion",
			Handler:       _TelemetryService_SubscribeCameraAttitudeQuaternion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCameraAttitudeEuler",
			Handler:       _TelemetryService_SubscribeCameraAttitudeEuler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGroundSpeedNed",
			Handler:       _TelemetryService_SubscribeGroundSpeedNed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGpsInfo",
			Handler:       _TelemetryService_SubscribeGpsInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBattery",
			Handler:       _TelemetryService_SubscribeBattery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFlightMode",
			Handler:       _TelemetryService_SubscribeFlightMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHealth",
			Handler:       _TelemetryService_SubscribeHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRcStatus",
			Handler:       _TelemetryService_SubscribeRcStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStatusText",
			Handler:       _TelemetryService_SubscribeStatusText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorControlTarget",
			Handler:       _TelemetryService_SubscribeActuatorControlTarget_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorOutputStatus",
			Handler:       _TelemetryService_SubscribeActuatorOutputStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOdometry",
			Handler:       _TelemetryService_SubscribeOdometry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "MAVSDK-Proto/protos/telemetry/telemetry.proto",
}
