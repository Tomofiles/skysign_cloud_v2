// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MAVSDK-Proto/protos/calibration/calibration.proto

package mavsdk_rpc_calibration

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Possible results returned for calibration commands
type CalibrationResult_Result int32

const (
	CalibrationResult_UNKNOWN          CalibrationResult_Result = 0
	CalibrationResult_SUCCESS          CalibrationResult_Result = 1
	CalibrationResult_IN_PROGRESS      CalibrationResult_Result = 2
	CalibrationResult_INSTRUCTION      CalibrationResult_Result = 3
	CalibrationResult_FAILED           CalibrationResult_Result = 4
	CalibrationResult_NO_SYSTEM        CalibrationResult_Result = 5
	CalibrationResult_CONNECTION_ERROR CalibrationResult_Result = 6
	CalibrationResult_BUSY             CalibrationResult_Result = 7
	CalibrationResult_COMMAND_DENIED   CalibrationResult_Result = 8
	CalibrationResult_TIMEOUT          CalibrationResult_Result = 9
	CalibrationResult_CANCELLED        CalibrationResult_Result = 10
)

var CalibrationResult_Result_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUCCESS",
	2:  "IN_PROGRESS",
	3:  "INSTRUCTION",
	4:  "FAILED",
	5:  "NO_SYSTEM",
	6:  "CONNECTION_ERROR",
	7:  "BUSY",
	8:  "COMMAND_DENIED",
	9:  "TIMEOUT",
	10: "CANCELLED",
}

var CalibrationResult_Result_value = map[string]int32{
	"UNKNOWN":          0,
	"SUCCESS":          1,
	"IN_PROGRESS":      2,
	"INSTRUCTION":      3,
	"FAILED":           4,
	"NO_SYSTEM":        5,
	"CONNECTION_ERROR": 6,
	"BUSY":             7,
	"COMMAND_DENIED":   8,
	"TIMEOUT":          9,
	"CANCELLED":        10,
}

func (x CalibrationResult_Result) String() string {
	return proto.EnumName(CalibrationResult_Result_name, int32(x))
}

func (CalibrationResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{10, 0}
}

type SubscribeCalibrateGyroRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCalibrateGyroRequest) Reset()         { *m = SubscribeCalibrateGyroRequest{} }
func (m *SubscribeCalibrateGyroRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCalibrateGyroRequest) ProtoMessage()    {}
func (*SubscribeCalibrateGyroRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{0}
}

func (m *SubscribeCalibrateGyroRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCalibrateGyroRequest.Unmarshal(m, b)
}
func (m *SubscribeCalibrateGyroRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCalibrateGyroRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCalibrateGyroRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCalibrateGyroRequest.Merge(m, src)
}
func (m *SubscribeCalibrateGyroRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCalibrateGyroRequest.Size(m)
}
func (m *SubscribeCalibrateGyroRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCalibrateGyroRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCalibrateGyroRequest proto.InternalMessageInfo

type CalibrateGyroResponse struct {
	CalibrationResult    *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData         *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CalibrateGyroResponse) Reset()         { *m = CalibrateGyroResponse{} }
func (m *CalibrateGyroResponse) String() string { return proto.CompactTextString(m) }
func (*CalibrateGyroResponse) ProtoMessage()    {}
func (*CalibrateGyroResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{1}
}

func (m *CalibrateGyroResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrateGyroResponse.Unmarshal(m, b)
}
func (m *CalibrateGyroResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrateGyroResponse.Marshal(b, m, deterministic)
}
func (m *CalibrateGyroResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrateGyroResponse.Merge(m, src)
}
func (m *CalibrateGyroResponse) XXX_Size() int {
	return xxx_messageInfo_CalibrateGyroResponse.Size(m)
}
func (m *CalibrateGyroResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrateGyroResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrateGyroResponse proto.InternalMessageInfo

func (m *CalibrateGyroResponse) GetCalibrationResult() *CalibrationResult {
	if m != nil {
		return m.CalibrationResult
	}
	return nil
}

func (m *CalibrateGyroResponse) GetProgressData() *ProgressData {
	if m != nil {
		return m.ProgressData
	}
	return nil
}

type SubscribeCalibrateAccelerometerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCalibrateAccelerometerRequest) Reset() {
	*m = SubscribeCalibrateAccelerometerRequest{}
}
func (m *SubscribeCalibrateAccelerometerRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCalibrateAccelerometerRequest) ProtoMessage()    {}
func (*SubscribeCalibrateAccelerometerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{2}
}

func (m *SubscribeCalibrateAccelerometerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCalibrateAccelerometerRequest.Unmarshal(m, b)
}
func (m *SubscribeCalibrateAccelerometerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCalibrateAccelerometerRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCalibrateAccelerometerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCalibrateAccelerometerRequest.Merge(m, src)
}
func (m *SubscribeCalibrateAccelerometerRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCalibrateAccelerometerRequest.Size(m)
}
func (m *SubscribeCalibrateAccelerometerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCalibrateAccelerometerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCalibrateAccelerometerRequest proto.InternalMessageInfo

type CalibrateAccelerometerResponse struct {
	CalibrationResult    *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData         *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CalibrateAccelerometerResponse) Reset()         { *m = CalibrateAccelerometerResponse{} }
func (m *CalibrateAccelerometerResponse) String() string { return proto.CompactTextString(m) }
func (*CalibrateAccelerometerResponse) ProtoMessage()    {}
func (*CalibrateAccelerometerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{3}
}

func (m *CalibrateAccelerometerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrateAccelerometerResponse.Unmarshal(m, b)
}
func (m *CalibrateAccelerometerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrateAccelerometerResponse.Marshal(b, m, deterministic)
}
func (m *CalibrateAccelerometerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrateAccelerometerResponse.Merge(m, src)
}
func (m *CalibrateAccelerometerResponse) XXX_Size() int {
	return xxx_messageInfo_CalibrateAccelerometerResponse.Size(m)
}
func (m *CalibrateAccelerometerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrateAccelerometerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrateAccelerometerResponse proto.InternalMessageInfo

func (m *CalibrateAccelerometerResponse) GetCalibrationResult() *CalibrationResult {
	if m != nil {
		return m.CalibrationResult
	}
	return nil
}

func (m *CalibrateAccelerometerResponse) GetProgressData() *ProgressData {
	if m != nil {
		return m.ProgressData
	}
	return nil
}

type SubscribeCalibrateMagnetometerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCalibrateMagnetometerRequest) Reset()         { *m = SubscribeCalibrateMagnetometerRequest{} }
func (m *SubscribeCalibrateMagnetometerRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCalibrateMagnetometerRequest) ProtoMessage()    {}
func (*SubscribeCalibrateMagnetometerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{4}
}

func (m *SubscribeCalibrateMagnetometerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCalibrateMagnetometerRequest.Unmarshal(m, b)
}
func (m *SubscribeCalibrateMagnetometerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCalibrateMagnetometerRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCalibrateMagnetometerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCalibrateMagnetometerRequest.Merge(m, src)
}
func (m *SubscribeCalibrateMagnetometerRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCalibrateMagnetometerRequest.Size(m)
}
func (m *SubscribeCalibrateMagnetometerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCalibrateMagnetometerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCalibrateMagnetometerRequest proto.InternalMessageInfo

type CalibrateMagnetometerResponse struct {
	CalibrationResult    *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData         *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CalibrateMagnetometerResponse) Reset()         { *m = CalibrateMagnetometerResponse{} }
func (m *CalibrateMagnetometerResponse) String() string { return proto.CompactTextString(m) }
func (*CalibrateMagnetometerResponse) ProtoMessage()    {}
func (*CalibrateMagnetometerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{5}
}

func (m *CalibrateMagnetometerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrateMagnetometerResponse.Unmarshal(m, b)
}
func (m *CalibrateMagnetometerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrateMagnetometerResponse.Marshal(b, m, deterministic)
}
func (m *CalibrateMagnetometerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrateMagnetometerResponse.Merge(m, src)
}
func (m *CalibrateMagnetometerResponse) XXX_Size() int {
	return xxx_messageInfo_CalibrateMagnetometerResponse.Size(m)
}
func (m *CalibrateMagnetometerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrateMagnetometerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrateMagnetometerResponse proto.InternalMessageInfo

func (m *CalibrateMagnetometerResponse) GetCalibrationResult() *CalibrationResult {
	if m != nil {
		return m.CalibrationResult
	}
	return nil
}

func (m *CalibrateMagnetometerResponse) GetProgressData() *ProgressData {
	if m != nil {
		return m.ProgressData
	}
	return nil
}

type SubscribeCalibrateGimbalAccelerometerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeCalibrateGimbalAccelerometerRequest) Reset() {
	*m = SubscribeCalibrateGimbalAccelerometerRequest{}
}
func (m *SubscribeCalibrateGimbalAccelerometerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SubscribeCalibrateGimbalAccelerometerRequest) ProtoMessage() {}
func (*SubscribeCalibrateGimbalAccelerometerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{6}
}

func (m *SubscribeCalibrateGimbalAccelerometerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest.Unmarshal(m, b)
}
func (m *SubscribeCalibrateGimbalAccelerometerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeCalibrateGimbalAccelerometerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest.Merge(m, src)
}
func (m *SubscribeCalibrateGimbalAccelerometerRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest.Size(m)
}
func (m *SubscribeCalibrateGimbalAccelerometerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCalibrateGimbalAccelerometerRequest proto.InternalMessageInfo

type CalibrateGimbalAccelerometerResponse struct {
	CalibrationResult    *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData         *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CalibrateGimbalAccelerometerResponse) Reset()         { *m = CalibrateGimbalAccelerometerResponse{} }
func (m *CalibrateGimbalAccelerometerResponse) String() string { return proto.CompactTextString(m) }
func (*CalibrateGimbalAccelerometerResponse) ProtoMessage()    {}
func (*CalibrateGimbalAccelerometerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{7}
}

func (m *CalibrateGimbalAccelerometerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrateGimbalAccelerometerResponse.Unmarshal(m, b)
}
func (m *CalibrateGimbalAccelerometerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrateGimbalAccelerometerResponse.Marshal(b, m, deterministic)
}
func (m *CalibrateGimbalAccelerometerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrateGimbalAccelerometerResponse.Merge(m, src)
}
func (m *CalibrateGimbalAccelerometerResponse) XXX_Size() int {
	return xxx_messageInfo_CalibrateGimbalAccelerometerResponse.Size(m)
}
func (m *CalibrateGimbalAccelerometerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrateGimbalAccelerometerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrateGimbalAccelerometerResponse proto.InternalMessageInfo

func (m *CalibrateGimbalAccelerometerResponse) GetCalibrationResult() *CalibrationResult {
	if m != nil {
		return m.CalibrationResult
	}
	return nil
}

func (m *CalibrateGimbalAccelerometerResponse) GetProgressData() *ProgressData {
	if m != nil {
		return m.ProgressData
	}
	return nil
}

type CancelRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelRequest) Reset()         { *m = CancelRequest{} }
func (m *CancelRequest) String() string { return proto.CompactTextString(m) }
func (*CancelRequest) ProtoMessage()    {}
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{8}
}

func (m *CancelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelRequest.Unmarshal(m, b)
}
func (m *CancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelRequest.Marshal(b, m, deterministic)
}
func (m *CancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelRequest.Merge(m, src)
}
func (m *CancelRequest) XXX_Size() int {
	return xxx_messageInfo_CancelRequest.Size(m)
}
func (m *CancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelRequest proto.InternalMessageInfo

type CancelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelResponse) Reset()         { *m = CancelResponse{} }
func (m *CancelResponse) String() string { return proto.CompactTextString(m) }
func (*CancelResponse) ProtoMessage()    {}
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{9}
}

func (m *CancelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelResponse.Unmarshal(m, b)
}
func (m *CancelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelResponse.Marshal(b, m, deterministic)
}
func (m *CancelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelResponse.Merge(m, src)
}
func (m *CancelResponse) XXX_Size() int {
	return xxx_messageInfo_CancelResponse.Size(m)
}
func (m *CancelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelResponse proto.InternalMessageInfo

// Result type.
type CalibrationResult struct {
	Result               CalibrationResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.calibration.CalibrationResult_Result" json:"result,omitempty"`
	ResultStr            string                   `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CalibrationResult) Reset()         { *m = CalibrationResult{} }
func (m *CalibrationResult) String() string { return proto.CompactTextString(m) }
func (*CalibrationResult) ProtoMessage()    {}
func (*CalibrationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{10}
}

func (m *CalibrationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationResult.Unmarshal(m, b)
}
func (m *CalibrationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationResult.Marshal(b, m, deterministic)
}
func (m *CalibrationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationResult.Merge(m, src)
}
func (m *CalibrationResult) XXX_Size() int {
	return xxx_messageInfo_CalibrationResult.Size(m)
}
func (m *CalibrationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationResult proto.InternalMessageInfo

func (m *CalibrationResult) GetResult() CalibrationResult_Result {
	if m != nil {
		return m.Result
	}
	return CalibrationResult_UNKNOWN
}

func (m *CalibrationResult) GetResultStr() string {
	if m != nil {
		return m.ResultStr
	}
	return ""
}

//
// Progress data coming from calibration.
//
// Can be a progress percentage, or an instruction text.
type ProgressData struct {
	HasProgress          bool     `protobuf:"varint,1,opt,name=has_progress,json=hasProgress,proto3" json:"has_progress,omitempty"`
	Progress             float32  `protobuf:"fixed32,2,opt,name=progress,proto3" json:"progress,omitempty"`
	HasStatusText        bool     `protobuf:"varint,3,opt,name=has_status_text,json=hasStatusText,proto3" json:"has_status_text,omitempty"`
	StatusText           string   `protobuf:"bytes,4,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProgressData) Reset()         { *m = ProgressData{} }
func (m *ProgressData) String() string { return proto.CompactTextString(m) }
func (*ProgressData) ProtoMessage()    {}
func (*ProgressData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f289b85d600f250, []int{11}
}

func (m *ProgressData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProgressData.Unmarshal(m, b)
}
func (m *ProgressData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProgressData.Marshal(b, m, deterministic)
}
func (m *ProgressData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressData.Merge(m, src)
}
func (m *ProgressData) XXX_Size() int {
	return xxx_messageInfo_ProgressData.Size(m)
}
func (m *ProgressData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressData.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressData proto.InternalMessageInfo

func (m *ProgressData) GetHasProgress() bool {
	if m != nil {
		return m.HasProgress
	}
	return false
}

func (m *ProgressData) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *ProgressData) GetHasStatusText() bool {
	if m != nil {
		return m.HasStatusText
	}
	return false
}

func (m *ProgressData) GetStatusText() string {
	if m != nil {
		return m.StatusText
	}
	return ""
}

func init() {
	proto.RegisterEnum("mavsdk.rpc.calibration.CalibrationResult_Result", CalibrationResult_Result_name, CalibrationResult_Result_value)
	proto.RegisterType((*SubscribeCalibrateGyroRequest)(nil), "mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest")
	proto.RegisterType((*CalibrateGyroResponse)(nil), "mavsdk.rpc.calibration.CalibrateGyroResponse")
	proto.RegisterType((*SubscribeCalibrateAccelerometerRequest)(nil), "mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest")
	proto.RegisterType((*CalibrateAccelerometerResponse)(nil), "mavsdk.rpc.calibration.CalibrateAccelerometerResponse")
	proto.RegisterType((*SubscribeCalibrateMagnetometerRequest)(nil), "mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest")
	proto.RegisterType((*CalibrateMagnetometerResponse)(nil), "mavsdk.rpc.calibration.CalibrateMagnetometerResponse")
	proto.RegisterType((*SubscribeCalibrateGimbalAccelerometerRequest)(nil), "mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest")
	proto.RegisterType((*CalibrateGimbalAccelerometerResponse)(nil), "mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse")
	proto.RegisterType((*CancelRequest)(nil), "mavsdk.rpc.calibration.CancelRequest")
	proto.RegisterType((*CancelResponse)(nil), "mavsdk.rpc.calibration.CancelResponse")
	proto.RegisterType((*CalibrationResult)(nil), "mavsdk.rpc.calibration.CalibrationResult")
	proto.RegisterType((*ProgressData)(nil), "mavsdk.rpc.calibration.ProgressData")
}

func init() {
	proto.RegisterFile("MAVSDK-Proto/protos/calibration/calibration.proto", fileDescriptor_6f289b85d600f250)
}

var fileDescriptor_6f289b85d600f250 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xd1, 0x4e, 0xdb, 0x30,
	0x14, 0xc5, 0x05, 0x4a, 0x7b, 0x4b, 0x21, 0x58, 0x03, 0xa1, 0x4a, 0xc0, 0x16, 0x01, 0x03, 0x69,
	0x04, 0xc6, 0xc4, 0x9e, 0xb6, 0x49, 0x25, 0xc9, 0x58, 0x05, 0x4d, 0x50, 0xd2, 0x6e, 0xe3, 0x29,
	0x72, 0x83, 0x05, 0xd5, 0x4a, 0xd3, 0xd9, 0x2e, 0x62, 0xaf, 0xfb, 0x88, 0x3d, 0x4c, 0xda, 0x2f,
	0x8c, 0x1f, 0xd8, 0xe3, 0xf6, 0xb4, 0xcf, 0xd8, 0x8f, 0x4c, 0x71, 0x1b, 0x16, 0x20, 0xa1, 0xec,
	0xb1, 0x2f, 0x95, 0x7d, 0x7d, 0x7c, 0x7d, 0xce, 0xbd, 0xce, 0xa9, 0xe1, 0x69, 0xb5, 0xfc, 0xd6,
	0x35, 0xf6, 0x37, 0x0e, 0x59, 0x20, 0x82, 0xcd, 0x4e, 0xf8, 0xcb, 0x37, 0x7d, 0xd2, 0x6a, 0x36,
	0x18, 0x11, 0xcd, 0xa0, 0x1d, 0x1f, 0x6b, 0x72, 0x19, 0xcf, 0x9d, 0x91, 0x73, 0x7e, 0xfc, 0x41,
	0x63, 0x1d, 0x5f, 0x8b, 0xad, 0xaa, 0x4b, 0xb0, 0xe0, 0x76, 0x1b, 0xdc, 0x67, 0xcd, 0x06, 0xd5,
	0xfb, 0x71, 0xba, 0xf7, 0x89, 0x05, 0x0e, 0xfd, 0xd8, 0xa5, 0x5c, 0xa8, 0x3f, 0x10, 0xcc, 0xde,
	0x58, 0xe0, 0x9d, 0xa0, 0xcd, 0x29, 0x7e, 0x0f, 0x38, 0x96, 0xc9, 0x63, 0x94, 0x77, 0x5b, 0x62,
	0x1e, 0x3d, 0x44, 0x6b, 0x85, 0xed, 0x75, 0x2d, 0xf9, 0x3c, 0x4d, 0xff, 0x37, 0x76, 0xe4, 0x06,
	0x67, 0xc6, 0xbf, 0x19, 0xc2, 0x15, 0x28, 0x76, 0x58, 0x70, 0xc2, 0x28, 0xe7, 0xde, 0x31, 0x11,
	0x64, 0x3e, 0x23, 0x93, 0x2e, 0xa7, 0x25, 0x3d, 0xec, 0x83, 0x0d, 0x22, 0x88, 0x33, 0xd9, 0x89,
	0xcd, 0xd4, 0x35, 0x58, 0xbd, 0xad, 0xaf, 0xec, 0xfb, 0xb4, 0x45, 0x59, 0x70, 0x46, 0x05, 0x65,
	0x91, 0xd0, 0x5f, 0x08, 0x16, 0xd3, 0x10, 0xc3, 0xa4, 0xf8, 0x31, 0xac, 0xdc, 0x56, 0x5c, 0x25,
	0x27, 0x6d, 0x2a, 0xae, 0x0b, 0xfe, 0x89, 0x60, 0x21, 0x05, 0x30, 0x4c, 0x7a, 0x35, 0x78, 0x92,
	0x70, 0x83, 0x9b, 0x67, 0x0d, 0xd2, 0x4a, 0xec, 0xf3, 0x6f, 0x04, 0xcb, 0x77, 0xe3, 0x86, 0x49,
	0xfd, 0x34, 0x14, 0x75, 0xd2, 0xf6, 0x69, 0x2b, 0x92, 0xa7, 0xc0, 0x54, 0x14, 0xe8, 0xe9, 0x50,
	0xbf, 0x67, 0x60, 0xe6, 0x16, 0x2d, 0xfc, 0x06, 0xb2, 0x31, 0x45, 0x53, 0xdb, 0x5b, 0xf7, 0x56,
	0xa4, 0xf5, 0x85, 0xf5, 0xf7, 0xe3, 0x05, 0x80, 0xde, 0xc8, 0xe3, 0x82, 0x49, 0x29, 0x79, 0x27,
	0xdf, 0x8b, 0xb8, 0x82, 0xa9, 0x97, 0x08, 0xb2, 0xfd, 0x33, 0x0b, 0x30, 0x51, 0xb7, 0xf6, 0x2d,
	0xfb, 0x9d, 0xa5, 0x8c, 0x84, 0x13, 0xb7, 0xae, 0xeb, 0xa6, 0xeb, 0x2a, 0x08, 0x4f, 0x43, 0xa1,
	0x62, 0x79, 0x87, 0x8e, 0xbd, 0xe7, 0x84, 0x81, 0x4c, 0x2f, 0xe0, 0xd6, 0x9c, 0xba, 0x5e, 0xab,
	0xd8, 0x96, 0x32, 0x8a, 0x01, 0xb2, 0xaf, 0xcb, 0x95, 0x03, 0xd3, 0x50, 0xc6, 0x70, 0x11, 0xf2,
	0x96, 0xed, 0xb9, 0x47, 0x6e, 0xcd, 0xac, 0x2a, 0xe3, 0xf8, 0x01, 0x28, 0xba, 0x6d, 0x59, 0xa6,
	0x84, 0x7a, 0xa6, 0xe3, 0xd8, 0x8e, 0x92, 0xc5, 0x39, 0x18, 0xdb, 0xad, 0xbb, 0x47, 0xca, 0x04,
	0xc6, 0x30, 0xa5, 0xdb, 0xd5, 0x6a, 0xd9, 0x32, 0x3c, 0xc3, 0xb4, 0x2a, 0xa6, 0xa1, 0xe4, 0xc2,
	0xd3, 0x6b, 0x95, 0xaa, 0x69, 0xd7, 0x6b, 0x4a, 0x3e, 0xcc, 0xa7, 0x97, 0x2d, 0xdd, 0x3c, 0x08,
	0xd3, 0x83, 0xfa, 0x05, 0xc1, 0x64, 0xbc, 0xe4, 0xf8, 0x11, 0x4c, 0x9e, 0x12, 0xee, 0x45, 0x85,
	0x97, 0x15, 0xcb, 0x39, 0x85, 0x53, 0xc2, 0x23, 0x18, 0x2e, 0x41, 0xee, 0x6a, 0x39, 0x2c, 0x41,
	0xc6, 0xb9, 0x9a, 0xe3, 0x55, 0x98, 0x0e, 0xb7, 0x73, 0x41, 0x44, 0x97, 0x7b, 0x82, 0x5e, 0x88,
	0xf9, 0x51, 0x99, 0xa1, 0x78, 0x4a, 0xb8, 0x2b, 0xa3, 0x35, 0x7a, 0x21, 0xf0, 0x12, 0x14, 0xe2,
	0x98, 0x31, 0x59, 0x49, 0xe0, 0x57, 0x80, 0xed, 0x3f, 0xe3, 0x80, 0x63, 0xed, 0x70, 0x29, 0x3b,
	0x6f, 0xfa, 0x14, 0x7f, 0x46, 0x30, 0x97, 0x6c, 0xe2, 0x78, 0x27, 0xad, 0xab, 0x77, 0x9a, 0x7e,
	0x69, 0x63, 0xd0, 0x65, 0xb8, 0xf6, 0x4f, 0xa0, 0x8e, 0x6c, 0x21, 0xfc, 0x0d, 0xc1, 0xd2, 0x00,
	0xa7, 0xc5, 0xaf, 0xee, 0xcf, 0x26, 0xe9, 0xd3, 0x2d, 0x3d, 0x1f, 0x48, 0x2b, 0xf1, 0x4b, 0x96,
	0xfc, 0xbe, 0x22, 0x58, 0xbc, 0xdb, 0x17, 0xf1, 0xcb, 0xfb, 0xd3, 0x4b, 0xf0, 0xd3, 0xd2, 0xce,
	0x40, 0x76, 0x49, 0x26, 0x2b, 0xc9, 0x5d, 0xa2, 0x24, 0xd3, 0x4e, 0x30, 0x27, 0x6c, 0xfc, 0x47,
	0x43, 0x53, 0x3d, 0xb0, 0xf4, 0x62, 0x70, 0x7f, 0xd3, 0x8d, 0x51, 0x32, 0x3e, 0x82, 0x6c, 0xcf,
	0x66, 0xf0, 0x4a, 0x7a, 0xae, 0x98, 0x2f, 0x95, 0x56, 0x07, 0xc1, 0xa2, 0xe4, 0xbb, 0xeb, 0x30,
	0xdb, 0x0c, 0x22, 0x74, 0x0c, 0xb9, 0xab, 0xc4, 0xee, 0xbe, 0x7c, 0xfa, 0x34, 0xb2, 0xf2, 0x71,
	0xf3, 0xec, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xd2, 0x98, 0xcb, 0x11, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalibrationServiceClient is the client API for CalibrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalibrationServiceClient interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGyroClient, error)
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateAccelerometerClient, error)
	// Perform magnetometer caliration.
	SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateMagnetometerClient, error)
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGimbalAccelerometerClient, error)
	// Cancel ongoing calibration process.
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type calibrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalibrationServiceClient(cc *grpc.ClientConn) CalibrationServiceClient {
	return &calibrationServiceClient{cc}
}

func (c *calibrationServiceClient) SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGyroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalibrationService_serviceDesc.Streams[0], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGyro", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateGyroClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateGyroClient interface {
	Recv() (*CalibrateGyroResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateGyroClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateGyroClient) Recv() (*CalibrateGyroResponse, error) {
	m := new(CalibrateGyroResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateAccelerometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalibrationService_serviceDesc.Streams[1], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateAccelerometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateAccelerometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateAccelerometerClient interface {
	Recv() (*CalibrateAccelerometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateAccelerometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateAccelerometerClient) Recv() (*CalibrateAccelerometerResponse, error) {
	m := new(CalibrateAccelerometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateMagnetometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalibrationService_serviceDesc.Streams[2], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateMagnetometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateMagnetometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateMagnetometerClient interface {
	Recv() (*CalibrateMagnetometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateMagnetometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateMagnetometerClient) Recv() (*CalibrateMagnetometerResponse, error) {
	m := new(CalibrateMagnetometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGimbalAccelerometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalibrationService_serviceDesc.Streams[3], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGimbalAccelerometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateGimbalAccelerometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateGimbalAccelerometerClient interface {
	Recv() (*CalibrateGimbalAccelerometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateGimbalAccelerometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateGimbalAccelerometerClient) Recv() (*CalibrateGimbalAccelerometerResponse, error) {
	m := new(CalibrateGimbalAccelerometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.calibration.CalibrationService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalibrationServiceServer is the server API for CalibrationService service.
type CalibrationServiceServer interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(*SubscribeCalibrateGyroRequest, CalibrationService_SubscribeCalibrateGyroServer) error
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(*SubscribeCalibrateAccelerometerRequest, CalibrationService_SubscribeCalibrateAccelerometerServer) error
	// Perform magnetometer caliration.
	SubscribeCalibrateMagnetometer(*SubscribeCalibrateMagnetometerRequest, CalibrationService_SubscribeCalibrateMagnetometerServer) error
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(*SubscribeCalibrateGimbalAccelerometerRequest, CalibrationService_SubscribeCalibrateGimbalAccelerometerServer) error
	// Cancel ongoing calibration process.
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
}

// UnimplementedCalibrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalibrationServiceServer struct {
}

func (*UnimplementedCalibrationServiceServer) SubscribeCalibrateGyro(req *SubscribeCalibrateGyroRequest, srv CalibrationService_SubscribeCalibrateGyroServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGyro not implemented")
}
func (*UnimplementedCalibrationServiceServer) SubscribeCalibrateAccelerometer(req *SubscribeCalibrateAccelerometerRequest, srv CalibrationService_SubscribeCalibrateAccelerometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateAccelerometer not implemented")
}
func (*UnimplementedCalibrationServiceServer) SubscribeCalibrateMagnetometer(req *SubscribeCalibrateMagnetometerRequest, srv CalibrationService_SubscribeCalibrateMagnetometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateMagnetometer not implemented")
}
func (*UnimplementedCalibrationServiceServer) SubscribeCalibrateGimbalAccelerometer(req *SubscribeCalibrateGimbalAccelerometerRequest, srv CalibrationService_SubscribeCalibrateGimbalAccelerometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGimbalAccelerometer not implemented")
}
func (*UnimplementedCalibrationServiceServer) Cancel(ctx context.Context, req *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}

func RegisterCalibrationServiceServer(s *grpc.Server, srv CalibrationServiceServer) {
	s.RegisterService(&_CalibrationService_serviceDesc, srv)
}

func _CalibrationService_SubscribeCalibrateGyro_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGyroRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGyro(m, &calibrationServiceSubscribeCalibrateGyroServer{stream})
}

type CalibrationService_SubscribeCalibrateGyroServer interface {
	Send(*CalibrateGyroResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateGyroServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateGyroServer) Send(m *CalibrateGyroResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateAccelerometer(m, &calibrationServiceSubscribeCalibrateAccelerometerServer{stream})
}

type CalibrationService_SubscribeCalibrateAccelerometerServer interface {
	Send(*CalibrateAccelerometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateAccelerometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateAccelerometerServer) Send(m *CalibrateAccelerometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateMagnetometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateMagnetometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateMagnetometer(m, &calibrationServiceSubscribeCalibrateMagnetometerServer{stream})
}

type CalibrationService_SubscribeCalibrateMagnetometerServer interface {
	Send(*CalibrateMagnetometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateMagnetometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateMagnetometerServer) Send(m *CalibrateMagnetometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGimbalAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGimbalAccelerometer(m, &calibrationServiceSubscribeCalibrateGimbalAccelerometerServer{stream})
}

type CalibrationService_SubscribeCalibrateGimbalAccelerometerServer interface {
	Send(*CalibrateGimbalAccelerometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateGimbalAccelerometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateGimbalAccelerometerServer) Send(m *CalibrateGimbalAccelerometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalibrationServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.calibration.CalibrationService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalibrationServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalibrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.calibration.CalibrationService",
	HandlerType: (*CalibrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancel",
			Handler:    _CalibrationService_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCalibrateGyro",
			Handler:       _CalibrationService_SubscribeCalibrateGyro_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateAccelerometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateMagnetometer",
			Handler:       _CalibrationService_SubscribeCalibrateMagnetometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateGimbalAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "MAVSDK-Proto/protos/calibration/calibration.proto",
}
