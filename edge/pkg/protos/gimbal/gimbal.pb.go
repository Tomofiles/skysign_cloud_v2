// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MAVSDK-Proto/protos/gimbal/gimbal.proto

package mavsdk_rpc_gimbal

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Gimbal mode type.
type GimbalMode int32

const (
	GimbalMode_YAW_FOLLOW GimbalMode = 0
	GimbalMode_YAW_LOCK   GimbalMode = 1
)

var GimbalMode_name = map[int32]string{
	0: "YAW_FOLLOW",
	1: "YAW_LOCK",
}

var GimbalMode_value = map[string]int32{
	"YAW_FOLLOW": 0,
	"YAW_LOCK":   1,
}

func (x GimbalMode) String() string {
	return proto.EnumName(GimbalMode_name, int32(x))
}

func (GimbalMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{0}
}

// Possible results returned for gimbal commands.
type GimbalResult_Result int32

const (
	GimbalResult_UNKNOWN GimbalResult_Result = 0
	GimbalResult_SUCCESS GimbalResult_Result = 1
	GimbalResult_ERROR   GimbalResult_Result = 2
	GimbalResult_TIMEOUT GimbalResult_Result = 3
)

var GimbalResult_Result_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCESS",
	2: "ERROR",
	3: "TIMEOUT",
}

var GimbalResult_Result_value = map[string]int32{
	"UNKNOWN": 0,
	"SUCCESS": 1,
	"ERROR":   2,
	"TIMEOUT": 3,
}

func (x GimbalResult_Result) String() string {
	return proto.EnumName(GimbalResult_Result_name, int32(x))
}

func (GimbalResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{4, 0}
}

type SetPitchAndYawRequest struct {
	PitchDeg             float32  `protobuf:"fixed32,1,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`
	YawDeg               float32  `protobuf:"fixed32,2,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetPitchAndYawRequest) Reset()         { *m = SetPitchAndYawRequest{} }
func (m *SetPitchAndYawRequest) String() string { return proto.CompactTextString(m) }
func (*SetPitchAndYawRequest) ProtoMessage()    {}
func (*SetPitchAndYawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{0}
}

func (m *SetPitchAndYawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPitchAndYawRequest.Unmarshal(m, b)
}
func (m *SetPitchAndYawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPitchAndYawRequest.Marshal(b, m, deterministic)
}
func (m *SetPitchAndYawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPitchAndYawRequest.Merge(m, src)
}
func (m *SetPitchAndYawRequest) XXX_Size() int {
	return xxx_messageInfo_SetPitchAndYawRequest.Size(m)
}
func (m *SetPitchAndYawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPitchAndYawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPitchAndYawRequest proto.InternalMessageInfo

func (m *SetPitchAndYawRequest) GetPitchDeg() float32 {
	if m != nil {
		return m.PitchDeg
	}
	return 0
}

func (m *SetPitchAndYawRequest) GetYawDeg() float32 {
	if m != nil {
		return m.YawDeg
	}
	return 0
}

type SetPitchAndYawResponse struct {
	GimbalResult         *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetPitchAndYawResponse) Reset()         { *m = SetPitchAndYawResponse{} }
func (m *SetPitchAndYawResponse) String() string { return proto.CompactTextString(m) }
func (*SetPitchAndYawResponse) ProtoMessage()    {}
func (*SetPitchAndYawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{1}
}

func (m *SetPitchAndYawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPitchAndYawResponse.Unmarshal(m, b)
}
func (m *SetPitchAndYawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPitchAndYawResponse.Marshal(b, m, deterministic)
}
func (m *SetPitchAndYawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPitchAndYawResponse.Merge(m, src)
}
func (m *SetPitchAndYawResponse) XXX_Size() int {
	return xxx_messageInfo_SetPitchAndYawResponse.Size(m)
}
func (m *SetPitchAndYawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPitchAndYawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetPitchAndYawResponse proto.InternalMessageInfo

func (m *SetPitchAndYawResponse) GetGimbalResult() *GimbalResult {
	if m != nil {
		return m.GimbalResult
	}
	return nil
}

type SetModeRequest struct {
	GimbalMode           GimbalMode `protobuf:"varint,1,opt,name=gimbal_mode,json=gimbalMode,proto3,enum=mavsdk.rpc.gimbal.GimbalMode" json:"gimbal_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SetModeRequest) Reset()         { *m = SetModeRequest{} }
func (m *SetModeRequest) String() string { return proto.CompactTextString(m) }
func (*SetModeRequest) ProtoMessage()    {}
func (*SetModeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{2}
}

func (m *SetModeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetModeRequest.Unmarshal(m, b)
}
func (m *SetModeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetModeRequest.Marshal(b, m, deterministic)
}
func (m *SetModeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetModeRequest.Merge(m, src)
}
func (m *SetModeRequest) XXX_Size() int {
	return xxx_messageInfo_SetModeRequest.Size(m)
}
func (m *SetModeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetModeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetModeRequest proto.InternalMessageInfo

func (m *SetModeRequest) GetGimbalMode() GimbalMode {
	if m != nil {
		return m.GimbalMode
	}
	return GimbalMode_YAW_FOLLOW
}

type SetModeResponse struct {
	GimbalResult         *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetModeResponse) Reset()         { *m = SetModeResponse{} }
func (m *SetModeResponse) String() string { return proto.CompactTextString(m) }
func (*SetModeResponse) ProtoMessage()    {}
func (*SetModeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{3}
}

func (m *SetModeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetModeResponse.Unmarshal(m, b)
}
func (m *SetModeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetModeResponse.Marshal(b, m, deterministic)
}
func (m *SetModeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetModeResponse.Merge(m, src)
}
func (m *SetModeResponse) XXX_Size() int {
	return xxx_messageInfo_SetModeResponse.Size(m)
}
func (m *SetModeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetModeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetModeResponse proto.InternalMessageInfo

func (m *SetModeResponse) GetGimbalResult() *GimbalResult {
	if m != nil {
		return m.GimbalResult
	}
	return nil
}

// Result type.
type GimbalResult struct {
	Result               GimbalResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.gimbal.GimbalResult_Result" json:"result,omitempty"`
	ResultStr            string              `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GimbalResult) Reset()         { *m = GimbalResult{} }
func (m *GimbalResult) String() string { return proto.CompactTextString(m) }
func (*GimbalResult) ProtoMessage()    {}
func (*GimbalResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ea09c69e7a35b3, []int{4}
}

func (m *GimbalResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GimbalResult.Unmarshal(m, b)
}
func (m *GimbalResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GimbalResult.Marshal(b, m, deterministic)
}
func (m *GimbalResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GimbalResult.Merge(m, src)
}
func (m *GimbalResult) XXX_Size() int {
	return xxx_messageInfo_GimbalResult.Size(m)
}
func (m *GimbalResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GimbalResult.DiscardUnknown(m)
}

var xxx_messageInfo_GimbalResult proto.InternalMessageInfo

func (m *GimbalResult) GetResult() GimbalResult_Result {
	if m != nil {
		return m.Result
	}
	return GimbalResult_UNKNOWN
}

func (m *GimbalResult) GetResultStr() string {
	if m != nil {
		return m.ResultStr
	}
	return ""
}

func init() {
	proto.RegisterEnum("mavsdk.rpc.gimbal.GimbalMode", GimbalMode_name, GimbalMode_value)
	proto.RegisterEnum("mavsdk.rpc.gimbal.GimbalResult_Result", GimbalResult_Result_name, GimbalResult_Result_value)
	proto.RegisterType((*SetPitchAndYawRequest)(nil), "mavsdk.rpc.gimbal.SetPitchAndYawRequest")
	proto.RegisterType((*SetPitchAndYawResponse)(nil), "mavsdk.rpc.gimbal.SetPitchAndYawResponse")
	proto.RegisterType((*SetModeRequest)(nil), "mavsdk.rpc.gimbal.SetModeRequest")
	proto.RegisterType((*SetModeResponse)(nil), "mavsdk.rpc.gimbal.SetModeResponse")
	proto.RegisterType((*GimbalResult)(nil), "mavsdk.rpc.gimbal.GimbalResult")
}

func init() {
	proto.RegisterFile("MAVSDK-Proto/protos/gimbal/gimbal.proto", fileDescriptor_55ea09c69e7a35b3)
}

var fileDescriptor_55ea09c69e7a35b3 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0xaf, 0xd2, 0x30,
	0x14, 0xc7, 0x19, 0xc6, 0x71, 0x77, 0xc6, 0x9d, 0xb3, 0x89, 0x3f, 0x72, 0xcd, 0xcd, 0xd5, 0x3d,
	0xe8, 0x95, 0xc4, 0x91, 0xcc, 0x37, 0x1f, 0x48, 0x80, 0xa1, 0x31, 0x30, 0x46, 0x5a, 0x70, 0xe1,
	0xc5, 0x65, 0xb0, 0x66, 0x2e, 0x02, 0x9b, 0x5b, 0x81, 0xf0, 0x27, 0xf9, 0xbf, 0xf8, 0x47, 0x99,
	0xb5, 0x03, 0x17, 0xc5, 0x1f, 0x0f, 0xbe, 0xb4, 0x3d, 0xe7, 0x7c, 0xcf, 0xa7, 0xa7, 0x3d, 0x2d,
	0xbc, 0x70, 0xba, 0x1f, 0x88, 0x3d, 0x7c, 0x35, 0xc9, 0x12, 0x96, 0xb4, 0xd3, 0x62, 0xcc, 0xdb,
	0x51, 0xbc, 0x5e, 0x04, 0xab, 0x72, 0x32, 0xb9, 0x13, 0xdd, 0x5f, 0x07, 0xbb, 0x3c, 0xfc, 0x6c,
	0x66, 0xe9, 0xd2, 0x14, 0x01, 0xc3, 0x81, 0x07, 0x84, 0xb2, 0x49, 0xcc, 0x96, 0x9f, 0xba, 0x9b,
	0x70, 0x1e, 0xec, 0x31, 0xfd, 0xb2, 0xa5, 0x39, 0x43, 0x4f, 0x40, 0x49, 0x0b, 0xaf, 0x1f, 0xd2,
	0xe8, 0xb1, 0xf4, 0x54, 0xba, 0xad, 0xe3, 0x0b, 0xee, 0xb0, 0x69, 0x84, 0x1e, 0x41, 0xe3, 0x10,
	0xec, 0x79, 0xa8, 0xce, 0x43, 0xf2, 0x21, 0xd8, 0xdb, 0x34, 0x32, 0x3e, 0xc2, 0xc3, 0x9f, 0x71,
	0x79, 0x9a, 0x6c, 0x72, 0x8a, 0x6c, 0xb8, 0x14, 0x5b, 0xfa, 0x19, 0xcd, 0xb7, 0x2b, 0xc6, 0x99,
	0xaa, 0x75, 0x63, 0xfe, 0x52, 0x93, 0xf9, 0x8e, 0x4f, 0x98, 0xcb, 0x70, 0x33, 0xaa, 0x58, 0xc6,
	0x04, 0x34, 0x42, 0x99, 0x93, 0x84, 0xf4, 0x58, 0x67, 0x07, 0xd4, 0x92, 0xbb, 0x4e, 0x42, 0xca,
	0xa9, 0x9a, 0x75, 0xfd, 0x5b, 0x2a, 0x4f, 0x85, 0xe8, 0xb4, 0x36, 0x3c, 0xb8, 0x77, 0x22, 0xfe,
	0xd7, 0x52, 0xbf, 0x4a, 0xd0, 0xac, 0x86, 0x51, 0x07, 0xe4, 0x0a, 0x4f, 0xb3, 0x9e, 0xff, 0x85,
	0x67, 0x96, 0xd8, 0x32, 0x0b, 0x5d, 0x03, 0x88, 0x95, 0x9f, 0xb3, 0x8c, 0xdf, 0xbb, 0x82, 0x15,
	0xe1, 0x21, 0x2c, 0x33, 0xde, 0x80, 0x5c, 0x6e, 0xa4, 0x42, 0x63, 0x36, 0x1e, 0x8e, 0x5d, 0x6f,
	0xac, 0xd7, 0x0a, 0x83, 0xcc, 0xfa, 0xfd, 0x01, 0x21, 0xba, 0x84, 0x14, 0xb8, 0x3b, 0xc0, 0xd8,
	0xc5, 0x7a, 0xbd, 0xf0, 0x4f, 0xdf, 0x3b, 0x03, 0x77, 0x36, 0xd5, 0xef, 0xb4, 0x5a, 0x00, 0x3f,
	0xae, 0x07, 0x69, 0x00, 0xf3, 0xae, 0xe7, 0xbf, 0x75, 0x47, 0x23, 0xd7, 0xd3, 0x6b, 0xa8, 0x09,
	0x17, 0x85, 0x3d, 0x72, 0xfb, 0x43, 0x5d, 0xb2, 0xbe, 0x49, 0x70, 0x29, 0xc4, 0x84, 0x66, 0xbb,
	0x78, 0x49, 0x51, 0xc4, 0x9b, 0x52, 0x69, 0x3a, 0xba, 0x3d, 0x73, 0xb4, 0xb3, 0xcf, 0xec, 0xea,
	0xe5, 0x3f, 0x28, 0x45, 0x5b, 0x8c, 0x1a, 0xc2, 0xd0, 0x28, 0x7b, 0x85, 0x9e, 0x9d, 0xcf, 0xab,
	0xbc, 0x8c, 0x2b, 0xe3, 0x4f, 0x92, 0x23, 0xb3, 0x77, 0x03, 0x7a, 0x9c, 0x1c, 0x95, 0x42, 0xd5,
	0x53, 0xc5, 0xf9, 0xf8, 0x7f, 0x5a, 0xc8, 0xfc, 0xef, 0xbc, 0xfe, 0x1e, 0x00, 0x00, 0xff, 0xff,
	0x04, 0x35, 0xc5, 0xae, 0x66, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GimbalServiceClient is the client API for GimbalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GimbalServiceClient interface {
	//
	//
	// Set gimbal pitch and yaw angles.
	//
	// This sets the desired pitch and yaw angles of a gimbal.
	// Will return when the command is accepted, however, it might
	// take the gimbal longer to actually be set to the new angles.
	SetPitchAndYaw(ctx context.Context, in *SetPitchAndYawRequest, opts ...grpc.CallOption) (*SetPitchAndYawResponse, error)
	//
	// Set gimbal mode.
	//
	// This sets the desired yaw mode of a gimbal.
	// Will return when the command is accepted. However, it might
	// take the gimbal longer to actually be set to the new angles.
	SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error)
}

type gimbalServiceClient struct {
	cc *grpc.ClientConn
}

func NewGimbalServiceClient(cc *grpc.ClientConn) GimbalServiceClient {
	return &gimbalServiceClient{cc}
}

func (c *gimbalServiceClient) SetPitchAndYaw(ctx context.Context, in *SetPitchAndYawRequest, opts ...grpc.CallOption) (*SetPitchAndYawResponse, error) {
	out := new(SetPitchAndYawResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.gimbal.GimbalService/SetPitchAndYaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gimbalServiceClient) SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error) {
	out := new(SetModeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.gimbal.GimbalService/SetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GimbalServiceServer is the server API for GimbalService service.
type GimbalServiceServer interface {
	//
	//
	// Set gimbal pitch and yaw angles.
	//
	// This sets the desired pitch and yaw angles of a gimbal.
	// Will return when the command is accepted, however, it might
	// take the gimbal longer to actually be set to the new angles.
	SetPitchAndYaw(context.Context, *SetPitchAndYawRequest) (*SetPitchAndYawResponse, error)
	//
	// Set gimbal mode.
	//
	// This sets the desired yaw mode of a gimbal.
	// Will return when the command is accepted. However, it might
	// take the gimbal longer to actually be set to the new angles.
	SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error)
}

// UnimplementedGimbalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGimbalServiceServer struct {
}

func (*UnimplementedGimbalServiceServer) SetPitchAndYaw(ctx context.Context, req *SetPitchAndYawRequest) (*SetPitchAndYawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPitchAndYaw not implemented")
}
func (*UnimplementedGimbalServiceServer) SetMode(ctx context.Context, req *SetModeRequest) (*SetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}

func RegisterGimbalServiceServer(s *grpc.Server, srv GimbalServiceServer) {
	s.RegisterService(&_GimbalService_serviceDesc, srv)
}

func _GimbalService_SetPitchAndYaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPitchAndYawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GimbalServiceServer).SetPitchAndYaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.gimbal.GimbalService/SetPitchAndYaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GimbalServiceServer).SetPitchAndYaw(ctx, req.(*SetPitchAndYawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GimbalService_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GimbalServiceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.gimbal.GimbalService/SetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GimbalServiceServer).SetMode(ctx, req.(*SetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GimbalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.gimbal.GimbalService",
	HandlerType: (*GimbalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPitchAndYaw",
			Handler:    _GimbalService_SetPitchAndYaw_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _GimbalService_SetMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MAVSDK-Proto/protos/gimbal/gimbal.proto",
}
