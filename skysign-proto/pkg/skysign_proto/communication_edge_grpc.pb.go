// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationEdgeServiceClient is the client API for CommunicationEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationEdgeServiceClient interface {
	PushTelemetry(ctx context.Context, in *PushTelemetryRequest, opts ...grpc.CallOption) (*PushTelemetryResponse, error)
	PullCommand(ctx context.Context, in *PullCommandRequest, opts ...grpc.CallOption) (*PullCommandResponse, error)
	PullUploadMission(ctx context.Context, in *PullUploadMissionRequest, opts ...grpc.CallOption) (*PullUploadMissionResponse, error)
}

type communicationEdgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationEdgeServiceClient(cc grpc.ClientConnInterface) CommunicationEdgeServiceClient {
	return &communicationEdgeServiceClient{cc}
}

func (c *communicationEdgeServiceClient) PushTelemetry(ctx context.Context, in *PushTelemetryRequest, opts ...grpc.CallOption) (*PushTelemetryResponse, error) {
	out := new(PushTelemetryResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationEdgeService/PushTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEdgeServiceClient) PullCommand(ctx context.Context, in *PullCommandRequest, opts ...grpc.CallOption) (*PullCommandResponse, error) {
	out := new(PullCommandResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationEdgeService/PullCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEdgeServiceClient) PullUploadMission(ctx context.Context, in *PullUploadMissionRequest, opts ...grpc.CallOption) (*PullUploadMissionResponse, error) {
	out := new(PullUploadMissionResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationEdgeService/PullUploadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationEdgeServiceServer is the server API for CommunicationEdgeService service.
// All implementations must embed UnimplementedCommunicationEdgeServiceServer
// for forward compatibility
type CommunicationEdgeServiceServer interface {
	PushTelemetry(context.Context, *PushTelemetryRequest) (*PushTelemetryResponse, error)
	PullCommand(context.Context, *PullCommandRequest) (*PullCommandResponse, error)
	PullUploadMission(context.Context, *PullUploadMissionRequest) (*PullUploadMissionResponse, error)
	mustEmbedUnimplementedCommunicationEdgeServiceServer()
}

// UnimplementedCommunicationEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationEdgeServiceServer struct {
}

func (UnimplementedCommunicationEdgeServiceServer) PushTelemetry(context.Context, *PushTelemetryRequest) (*PushTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTelemetry not implemented")
}
func (UnimplementedCommunicationEdgeServiceServer) PullCommand(context.Context, *PullCommandRequest) (*PullCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullCommand not implemented")
}
func (UnimplementedCommunicationEdgeServiceServer) PullUploadMission(context.Context, *PullUploadMissionRequest) (*PullUploadMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUploadMission not implemented")
}
func (UnimplementedCommunicationEdgeServiceServer) mustEmbedUnimplementedCommunicationEdgeServiceServer() {
}

// UnsafeCommunicationEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationEdgeServiceServer will
// result in compilation errors.
type UnsafeCommunicationEdgeServiceServer interface {
	mustEmbedUnimplementedCommunicationEdgeServiceServer()
}

func RegisterCommunicationEdgeServiceServer(s grpc.ServiceRegistrar, srv CommunicationEdgeServiceServer) {
	s.RegisterService(&CommunicationEdgeService_ServiceDesc, srv)
}

func _CommunicationEdgeService_PushTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEdgeServiceServer).PushTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationEdgeService/PushTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEdgeServiceServer).PushTelemetry(ctx, req.(*PushTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEdgeService_PullCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEdgeServiceServer).PullCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationEdgeService/PullCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEdgeServiceServer).PullCommand(ctx, req.(*PullCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEdgeService_PullUploadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullUploadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEdgeServiceServer).PullUploadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationEdgeService/PullUploadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEdgeServiceServer).PullUploadMission(ctx, req.(*PullUploadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunicationEdgeService_ServiceDesc is the grpc.ServiceDesc for CommunicationEdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunicationEdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.CommunicationEdgeService",
	HandlerType: (*CommunicationEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushTelemetry",
			Handler:    _CommunicationEdgeService_PushTelemetry_Handler,
		},
		{
			MethodName: "PullCommand",
			Handler:    _CommunicationEdgeService_PullCommand_Handler,
		},
		{
			MethodName: "PullUploadMission",
			Handler:    _CommunicationEdgeService_PullUploadMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/communication_edge.proto",
}
