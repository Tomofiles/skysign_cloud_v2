// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationUserServiceClient is the client API for CommunicationUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationUserServiceClient interface {
	PushCommand(ctx context.Context, in *PushCommandRequest, opts ...grpc.CallOption) (*PushCommandResponse, error)
	PushUploadMission(ctx context.Context, in *PushUploadMissionRequest, opts ...grpc.CallOption) (*PushUploadMissionResponse, error)
	PullTelemetry(ctx context.Context, in *PullTelemetryRequest, opts ...grpc.CallOption) (*PullTelemetryResponse, error)
}

type communicationUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationUserServiceClient(cc grpc.ClientConnInterface) CommunicationUserServiceClient {
	return &communicationUserServiceClient{cc}
}

func (c *communicationUserServiceClient) PushCommand(ctx context.Context, in *PushCommandRequest, opts ...grpc.CallOption) (*PushCommandResponse, error) {
	out := new(PushCommandResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationUserService/PushCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationUserServiceClient) PushUploadMission(ctx context.Context, in *PushUploadMissionRequest, opts ...grpc.CallOption) (*PushUploadMissionResponse, error) {
	out := new(PushUploadMissionResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationUserService/PushUploadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationUserServiceClient) PullTelemetry(ctx context.Context, in *PullTelemetryRequest, opts ...grpc.CallOption) (*PullTelemetryResponse, error) {
	out := new(PullTelemetryResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.CommunicationUserService/PullTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationUserServiceServer is the server API for CommunicationUserService service.
// All implementations must embed UnimplementedCommunicationUserServiceServer
// for forward compatibility
type CommunicationUserServiceServer interface {
	PushCommand(context.Context, *PushCommandRequest) (*PushCommandResponse, error)
	PushUploadMission(context.Context, *PushUploadMissionRequest) (*PushUploadMissionResponse, error)
	PullTelemetry(context.Context, *PullTelemetryRequest) (*PullTelemetryResponse, error)
	mustEmbedUnimplementedCommunicationUserServiceServer()
}

// UnimplementedCommunicationUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationUserServiceServer struct {
}

func (UnimplementedCommunicationUserServiceServer) PushCommand(context.Context, *PushCommandRequest) (*PushCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCommand not implemented")
}
func (UnimplementedCommunicationUserServiceServer) PushUploadMission(context.Context, *PushUploadMissionRequest) (*PushUploadMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUploadMission not implemented")
}
func (UnimplementedCommunicationUserServiceServer) PullTelemetry(context.Context, *PullTelemetryRequest) (*PullTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullTelemetry not implemented")
}
func (UnimplementedCommunicationUserServiceServer) mustEmbedUnimplementedCommunicationUserServiceServer() {
}

// UnsafeCommunicationUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationUserServiceServer will
// result in compilation errors.
type UnsafeCommunicationUserServiceServer interface {
	mustEmbedUnimplementedCommunicationUserServiceServer()
}

func RegisterCommunicationUserServiceServer(s grpc.ServiceRegistrar, srv CommunicationUserServiceServer) {
	s.RegisterService(&CommunicationUserService_ServiceDesc, srv)
}

func _CommunicationUserService_PushCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationUserServiceServer).PushCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationUserService/PushCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationUserServiceServer).PushCommand(ctx, req.(*PushCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationUserService_PushUploadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUploadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationUserServiceServer).PushUploadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationUserService/PushUploadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationUserServiceServer).PushUploadMission(ctx, req.(*PushUploadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationUserService_PullTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationUserServiceServer).PullTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.CommunicationUserService/PullTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationUserServiceServer).PullTelemetry(ctx, req.(*PullTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunicationUserService_ServiceDesc is the grpc.ServiceDesc for CommunicationUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunicationUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.CommunicationUserService",
	HandlerType: (*CommunicationUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushCommand",
			Handler:    _CommunicationUserService_PushCommand_Handler,
		},
		{
			MethodName: "PushUploadMission",
			Handler:    _CommunicationUserService_PushUploadMission_Handler,
		},
		{
			MethodName: "PullTelemetry",
			Handler:    _CommunicationUserService_PullTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/communication_user.proto",
}
