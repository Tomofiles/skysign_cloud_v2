// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssignAssetsToFleetServiceClient is the client API for AssignAssetsToFleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignAssetsToFleetServiceClient interface {
	GetAssignments(ctx context.Context, in *GetAssignmentsRequest, opts ...grpc.CallOption) (*GetAssignmentsResponse, error)
	UpdateAssignments(ctx context.Context, in *UpdateAssignmentsRequest, opts ...grpc.CallOption) (*UpdateAssignmentsResponse, error)
}

type assignAssetsToFleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignAssetsToFleetServiceClient(cc grpc.ClientConnInterface) AssignAssetsToFleetServiceClient {
	return &assignAssetsToFleetServiceClient{cc}
}

func (c *assignAssetsToFleetServiceClient) GetAssignments(ctx context.Context, in *GetAssignmentsRequest, opts ...grpc.CallOption) (*GetAssignmentsResponse, error) {
	out := new(GetAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.AssignAssetsToFleetService/GetAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignAssetsToFleetServiceClient) UpdateAssignments(ctx context.Context, in *UpdateAssignmentsRequest, opts ...grpc.CallOption) (*UpdateAssignmentsResponse, error) {
	out := new(UpdateAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.AssignAssetsToFleetService/UpdateAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignAssetsToFleetServiceServer is the server API for AssignAssetsToFleetService service.
// All implementations must embed UnimplementedAssignAssetsToFleetServiceServer
// for forward compatibility
type AssignAssetsToFleetServiceServer interface {
	GetAssignments(context.Context, *GetAssignmentsRequest) (*GetAssignmentsResponse, error)
	UpdateAssignments(context.Context, *UpdateAssignmentsRequest) (*UpdateAssignmentsResponse, error)
	mustEmbedUnimplementedAssignAssetsToFleetServiceServer()
}

// UnimplementedAssignAssetsToFleetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssignAssetsToFleetServiceServer struct {
}

func (UnimplementedAssignAssetsToFleetServiceServer) GetAssignments(context.Context, *GetAssignmentsRequest) (*GetAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignments not implemented")
}
func (UnimplementedAssignAssetsToFleetServiceServer) UpdateAssignments(context.Context, *UpdateAssignmentsRequest) (*UpdateAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignments not implemented")
}
func (UnimplementedAssignAssetsToFleetServiceServer) mustEmbedUnimplementedAssignAssetsToFleetServiceServer() {
}

// UnsafeAssignAssetsToFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignAssetsToFleetServiceServer will
// result in compilation errors.
type UnsafeAssignAssetsToFleetServiceServer interface {
	mustEmbedUnimplementedAssignAssetsToFleetServiceServer()
}

func RegisterAssignAssetsToFleetServiceServer(s grpc.ServiceRegistrar, srv AssignAssetsToFleetServiceServer) {
	s.RegisterService(&AssignAssetsToFleetService_ServiceDesc, srv)
}

func _AssignAssetsToFleetService_GetAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignAssetsToFleetServiceServer).GetAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.AssignAssetsToFleetService/GetAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignAssetsToFleetServiceServer).GetAssignments(ctx, req.(*GetAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignAssetsToFleetService_UpdateAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignAssetsToFleetServiceServer).UpdateAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.AssignAssetsToFleetService/UpdateAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignAssetsToFleetServiceServer).UpdateAssignments(ctx, req.(*UpdateAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignAssetsToFleetService_ServiceDesc is the grpc.ServiceDesc for AssignAssetsToFleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignAssetsToFleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.AssignAssetsToFleetService",
	HandlerType: (*AssignAssetsToFleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssignments",
			Handler:    _AssignAssetsToFleetService_GetAssignments_Handler,
		},
		{
			MethodName: "UpdateAssignments",
			Handler:    _AssignAssetsToFleetService_UpdateAssignments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fleet_assignments.proto",
}
