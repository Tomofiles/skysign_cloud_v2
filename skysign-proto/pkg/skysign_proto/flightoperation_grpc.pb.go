// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperateFlightServiceClient is the client API for OperateFlightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperateFlightServiceClient interface {
	ListFlightoperations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFlightoperationsResponses, error)
	GetFlightoperation(ctx context.Context, in *GetFlightoperationRequest, opts ...grpc.CallOption) (*Flightoperation, error)
	CompleteFlightoperation(ctx context.Context, in *CompleteFlightoperationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type operateFlightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperateFlightServiceClient(cc grpc.ClientConnInterface) OperateFlightServiceClient {
	return &operateFlightServiceClient{cc}
}

func (c *operateFlightServiceClient) ListFlightoperations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFlightoperationsResponses, error) {
	out := new(ListFlightoperationsResponses)
	err := c.cc.Invoke(ctx, "/skysign_proto.OperateFlightService/ListFlightoperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateFlightServiceClient) GetFlightoperation(ctx context.Context, in *GetFlightoperationRequest, opts ...grpc.CallOption) (*Flightoperation, error) {
	out := new(Flightoperation)
	err := c.cc.Invoke(ctx, "/skysign_proto.OperateFlightService/GetFlightoperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateFlightServiceClient) CompleteFlightoperation(ctx context.Context, in *CompleteFlightoperationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skysign_proto.OperateFlightService/CompleteFlightoperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperateFlightServiceServer is the server API for OperateFlightService service.
// All implementations must embed UnimplementedOperateFlightServiceServer
// for forward compatibility
type OperateFlightServiceServer interface {
	ListFlightoperations(context.Context, *Empty) (*ListFlightoperationsResponses, error)
	GetFlightoperation(context.Context, *GetFlightoperationRequest) (*Flightoperation, error)
	CompleteFlightoperation(context.Context, *CompleteFlightoperationRequest) (*Empty, error)
	mustEmbedUnimplementedOperateFlightServiceServer()
}

// UnimplementedOperateFlightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOperateFlightServiceServer struct {
}

func (UnimplementedOperateFlightServiceServer) ListFlightoperations(context.Context, *Empty) (*ListFlightoperationsResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlightoperations not implemented")
}
func (UnimplementedOperateFlightServiceServer) GetFlightoperation(context.Context, *GetFlightoperationRequest) (*Flightoperation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightoperation not implemented")
}
func (UnimplementedOperateFlightServiceServer) CompleteFlightoperation(context.Context, *CompleteFlightoperationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteFlightoperation not implemented")
}
func (UnimplementedOperateFlightServiceServer) mustEmbedUnimplementedOperateFlightServiceServer() {}

// UnsafeOperateFlightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperateFlightServiceServer will
// result in compilation errors.
type UnsafeOperateFlightServiceServer interface {
	mustEmbedUnimplementedOperateFlightServiceServer()
}

func RegisterOperateFlightServiceServer(s grpc.ServiceRegistrar, srv OperateFlightServiceServer) {
	s.RegisterService(&OperateFlightService_ServiceDesc, srv)
}

func _OperateFlightService_ListFlightoperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateFlightServiceServer).ListFlightoperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.OperateFlightService/ListFlightoperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateFlightServiceServer).ListFlightoperations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateFlightService_GetFlightoperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightoperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateFlightServiceServer).GetFlightoperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.OperateFlightService/GetFlightoperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateFlightServiceServer).GetFlightoperation(ctx, req.(*GetFlightoperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateFlightService_CompleteFlightoperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteFlightoperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateFlightServiceServer).CompleteFlightoperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.OperateFlightService/CompleteFlightoperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateFlightServiceServer).CompleteFlightoperation(ctx, req.(*CompleteFlightoperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperateFlightService_ServiceDesc is the grpc.ServiceDesc for OperateFlightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperateFlightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.OperateFlightService",
	HandlerType: (*OperateFlightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFlightoperations",
			Handler:    _OperateFlightService_ListFlightoperations_Handler,
		},
		{
			MethodName: "GetFlightoperation",
			Handler:    _OperateFlightService_GetFlightoperation_Handler,
		},
		{
			MethodName: "CompleteFlightoperation",
			Handler:    _OperateFlightService_CompleteFlightoperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flightoperation.proto",
}
