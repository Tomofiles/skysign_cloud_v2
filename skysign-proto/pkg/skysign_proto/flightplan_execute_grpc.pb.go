// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecuteFlightplanServiceClient is the client API for ExecuteFlightplanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecuteFlightplanServiceClient interface {
	ExecuteFlightplan(ctx context.Context, in *ExecuteFlightplanRequest, opts ...grpc.CallOption) (*ExecuteFlightplanResponse, error)
}

type executeFlightplanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecuteFlightplanServiceClient(cc grpc.ClientConnInterface) ExecuteFlightplanServiceClient {
	return &executeFlightplanServiceClient{cc}
}

func (c *executeFlightplanServiceClient) ExecuteFlightplan(ctx context.Context, in *ExecuteFlightplanRequest, opts ...grpc.CallOption) (*ExecuteFlightplanResponse, error) {
	out := new(ExecuteFlightplanResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.ExecuteFlightplanService/ExecuteFlightplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecuteFlightplanServiceServer is the server API for ExecuteFlightplanService service.
// All implementations must embed UnimplementedExecuteFlightplanServiceServer
// for forward compatibility
type ExecuteFlightplanServiceServer interface {
	ExecuteFlightplan(context.Context, *ExecuteFlightplanRequest) (*ExecuteFlightplanResponse, error)
	mustEmbedUnimplementedExecuteFlightplanServiceServer()
}

// UnimplementedExecuteFlightplanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExecuteFlightplanServiceServer struct {
}

func (UnimplementedExecuteFlightplanServiceServer) ExecuteFlightplan(context.Context, *ExecuteFlightplanRequest) (*ExecuteFlightplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFlightplan not implemented")
}
func (UnimplementedExecuteFlightplanServiceServer) mustEmbedUnimplementedExecuteFlightplanServiceServer() {
}

// UnsafeExecuteFlightplanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecuteFlightplanServiceServer will
// result in compilation errors.
type UnsafeExecuteFlightplanServiceServer interface {
	mustEmbedUnimplementedExecuteFlightplanServiceServer()
}

func RegisterExecuteFlightplanServiceServer(s grpc.ServiceRegistrar, srv ExecuteFlightplanServiceServer) {
	s.RegisterService(&ExecuteFlightplanService_ServiceDesc, srv)
}

func _ExecuteFlightplanService_ExecuteFlightplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteFlightplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteFlightplanServiceServer).ExecuteFlightplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ExecuteFlightplanService/ExecuteFlightplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteFlightplanServiceServer).ExecuteFlightplan(ctx, req.(*ExecuteFlightplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecuteFlightplanService_ServiceDesc is the grpc.ServiceDesc for ExecuteFlightplanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecuteFlightplanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.ExecuteFlightplanService",
	HandlerType: (*ExecuteFlightplanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFlightplan",
			Handler:    _ExecuteFlightplanService_ExecuteFlightplan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flightplan_execute.proto",
}
