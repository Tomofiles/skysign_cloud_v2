// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageFlightplanServiceClient is the client API for ManageFlightplanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageFlightplanServiceClient interface {
	ListFlightplans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFlightplansResponses, error)
	GetFlightplan(ctx context.Context, in *GetFlightplanRequest, opts ...grpc.CallOption) (*Flightplan, error)
	CreateFlightplan(ctx context.Context, in *Flightplan, opts ...grpc.CallOption) (*Flightplan, error)
	UpdateFlightplan(ctx context.Context, in *Flightplan, opts ...grpc.CallOption) (*Flightplan, error)
	DeleteFlightplan(ctx context.Context, in *DeleteFlightplanRequest, opts ...grpc.CallOption) (*Empty, error)
}

type manageFlightplanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageFlightplanServiceClient(cc grpc.ClientConnInterface) ManageFlightplanServiceClient {
	return &manageFlightplanServiceClient{cc}
}

func (c *manageFlightplanServiceClient) ListFlightplans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFlightplansResponses, error) {
	out := new(ListFlightplansResponses)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageFlightplanService/ListFlightplans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageFlightplanServiceClient) GetFlightplan(ctx context.Context, in *GetFlightplanRequest, opts ...grpc.CallOption) (*Flightplan, error) {
	out := new(Flightplan)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageFlightplanService/GetFlightplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageFlightplanServiceClient) CreateFlightplan(ctx context.Context, in *Flightplan, opts ...grpc.CallOption) (*Flightplan, error) {
	out := new(Flightplan)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageFlightplanService/CreateFlightplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageFlightplanServiceClient) UpdateFlightplan(ctx context.Context, in *Flightplan, opts ...grpc.CallOption) (*Flightplan, error) {
	out := new(Flightplan)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageFlightplanService/UpdateFlightplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageFlightplanServiceClient) DeleteFlightplan(ctx context.Context, in *DeleteFlightplanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageFlightplanService/DeleteFlightplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageFlightplanServiceServer is the server API for ManageFlightplanService service.
// All implementations must embed UnimplementedManageFlightplanServiceServer
// for forward compatibility
type ManageFlightplanServiceServer interface {
	ListFlightplans(context.Context, *Empty) (*ListFlightplansResponses, error)
	GetFlightplan(context.Context, *GetFlightplanRequest) (*Flightplan, error)
	CreateFlightplan(context.Context, *Flightplan) (*Flightplan, error)
	UpdateFlightplan(context.Context, *Flightplan) (*Flightplan, error)
	DeleteFlightplan(context.Context, *DeleteFlightplanRequest) (*Empty, error)
	mustEmbedUnimplementedManageFlightplanServiceServer()
}

// UnimplementedManageFlightplanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageFlightplanServiceServer struct {
}

func (UnimplementedManageFlightplanServiceServer) ListFlightplans(context.Context, *Empty) (*ListFlightplansResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlightplans not implemented")
}
func (UnimplementedManageFlightplanServiceServer) GetFlightplan(context.Context, *GetFlightplanRequest) (*Flightplan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightplan not implemented")
}
func (UnimplementedManageFlightplanServiceServer) CreateFlightplan(context.Context, *Flightplan) (*Flightplan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlightplan not implemented")
}
func (UnimplementedManageFlightplanServiceServer) UpdateFlightplan(context.Context, *Flightplan) (*Flightplan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightplan not implemented")
}
func (UnimplementedManageFlightplanServiceServer) DeleteFlightplan(context.Context, *DeleteFlightplanRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlightplan not implemented")
}
func (UnimplementedManageFlightplanServiceServer) mustEmbedUnimplementedManageFlightplanServiceServer() {
}

// UnsafeManageFlightplanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageFlightplanServiceServer will
// result in compilation errors.
type UnsafeManageFlightplanServiceServer interface {
	mustEmbedUnimplementedManageFlightplanServiceServer()
}

func RegisterManageFlightplanServiceServer(s grpc.ServiceRegistrar, srv ManageFlightplanServiceServer) {
	s.RegisterService(&ManageFlightplanService_ServiceDesc, srv)
}

func _ManageFlightplanService_ListFlightplans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageFlightplanServiceServer).ListFlightplans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageFlightplanService/ListFlightplans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageFlightplanServiceServer).ListFlightplans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageFlightplanService_GetFlightplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageFlightplanServiceServer).GetFlightplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageFlightplanService/GetFlightplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageFlightplanServiceServer).GetFlightplan(ctx, req.(*GetFlightplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageFlightplanService_CreateFlightplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flightplan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageFlightplanServiceServer).CreateFlightplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageFlightplanService/CreateFlightplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageFlightplanServiceServer).CreateFlightplan(ctx, req.(*Flightplan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageFlightplanService_UpdateFlightplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flightplan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageFlightplanServiceServer).UpdateFlightplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageFlightplanService/UpdateFlightplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageFlightplanServiceServer).UpdateFlightplan(ctx, req.(*Flightplan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageFlightplanService_DeleteFlightplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlightplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageFlightplanServiceServer).DeleteFlightplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageFlightplanService/DeleteFlightplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageFlightplanServiceServer).DeleteFlightplan(ctx, req.(*DeleteFlightplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageFlightplanService_ServiceDesc is the grpc.ServiceDesc for ManageFlightplanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageFlightplanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.ManageFlightplanService",
	HandlerType: (*ManageFlightplanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFlightplans",
			Handler:    _ManageFlightplanService_ListFlightplans_Handler,
		},
		{
			MethodName: "GetFlightplan",
			Handler:    _ManageFlightplanService_GetFlightplan_Handler,
		},
		{
			MethodName: "CreateFlightplan",
			Handler:    _ManageFlightplanService_CreateFlightplan_Handler,
		},
		{
			MethodName: "UpdateFlightplan",
			Handler:    _ManageFlightplanService_UpdateFlightplan_Handler,
		},
		{
			MethodName: "DeleteFlightplan",
			Handler:    _ManageFlightplanService_DeleteFlightplan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flightplan.proto",
}
