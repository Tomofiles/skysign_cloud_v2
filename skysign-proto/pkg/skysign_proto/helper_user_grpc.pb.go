// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelperUserServiceClient is the client API for HelperUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelperUserServiceClient interface {
	GetEllipsoidHeight(ctx context.Context, in *GetEllipsoidHeightRequest, opts ...grpc.CallOption) (*GetEllipsoidHeightResponse, error)
}

type helperUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelperUserServiceClient(cc grpc.ClientConnInterface) HelperUserServiceClient {
	return &helperUserServiceClient{cc}
}

func (c *helperUserServiceClient) GetEllipsoidHeight(ctx context.Context, in *GetEllipsoidHeightRequest, opts ...grpc.CallOption) (*GetEllipsoidHeightResponse, error) {
	out := new(GetEllipsoidHeightResponse)
	err := c.cc.Invoke(ctx, "/skysign_proto.HelperUserService/GetEllipsoidHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelperUserServiceServer is the server API for HelperUserService service.
// All implementations must embed UnimplementedHelperUserServiceServer
// for forward compatibility
type HelperUserServiceServer interface {
	GetEllipsoidHeight(context.Context, *GetEllipsoidHeightRequest) (*GetEllipsoidHeightResponse, error)
	mustEmbedUnimplementedHelperUserServiceServer()
}

// UnimplementedHelperUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelperUserServiceServer struct {
}

func (UnimplementedHelperUserServiceServer) GetEllipsoidHeight(context.Context, *GetEllipsoidHeightRequest) (*GetEllipsoidHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEllipsoidHeight not implemented")
}
func (UnimplementedHelperUserServiceServer) mustEmbedUnimplementedHelperUserServiceServer() {}

// UnsafeHelperUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelperUserServiceServer will
// result in compilation errors.
type UnsafeHelperUserServiceServer interface {
	mustEmbedUnimplementedHelperUserServiceServer()
}

func RegisterHelperUserServiceServer(s grpc.ServiceRegistrar, srv HelperUserServiceServer) {
	s.RegisterService(&HelperUserService_ServiceDesc, srv)
}

func _HelperUserService_GetEllipsoidHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEllipsoidHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperUserServiceServer).GetEllipsoidHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.HelperUserService/GetEllipsoidHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperUserServiceServer).GetEllipsoidHeight(ctx, req.(*GetEllipsoidHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelperUserService_ServiceDesc is the grpc.ServiceDesc for HelperUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelperUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.HelperUserService",
	HandlerType: (*HelperUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEllipsoidHeight",
			Handler:    _HelperUserService_GetEllipsoidHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/helper_user.proto",
}
