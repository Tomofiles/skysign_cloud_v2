// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageMissionServiceClient is the client API for ManageMissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageMissionServiceClient interface {
	ListMissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMissionsResponses, error)
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*Mission, error)
	CreateMission(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*Mission, error)
	UpdateMission(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*Mission, error)
	DeleteMission(ctx context.Context, in *DeleteMissionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type manageMissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageMissionServiceClient(cc grpc.ClientConnInterface) ManageMissionServiceClient {
	return &manageMissionServiceClient{cc}
}

func (c *manageMissionServiceClient) ListMissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMissionsResponses, error) {
	out := new(ListMissionsResponses)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageMissionService/ListMissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageMissionServiceClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*Mission, error) {
	out := new(Mission)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageMissionService/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageMissionServiceClient) CreateMission(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*Mission, error) {
	out := new(Mission)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageMissionService/CreateMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageMissionServiceClient) UpdateMission(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*Mission, error) {
	out := new(Mission)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageMissionService/UpdateMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageMissionServiceClient) DeleteMission(ctx context.Context, in *DeleteMissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skysign_proto.ManageMissionService/DeleteMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageMissionServiceServer is the server API for ManageMissionService service.
// All implementations must embed UnimplementedManageMissionServiceServer
// for forward compatibility
type ManageMissionServiceServer interface {
	ListMissions(context.Context, *Empty) (*ListMissionsResponses, error)
	GetMission(context.Context, *GetMissionRequest) (*Mission, error)
	CreateMission(context.Context, *Mission) (*Mission, error)
	UpdateMission(context.Context, *Mission) (*Mission, error)
	DeleteMission(context.Context, *DeleteMissionRequest) (*Empty, error)
	mustEmbedUnimplementedManageMissionServiceServer()
}

// UnimplementedManageMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageMissionServiceServer struct {
}

func (UnimplementedManageMissionServiceServer) ListMissions(context.Context, *Empty) (*ListMissionsResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMissions not implemented")
}
func (UnimplementedManageMissionServiceServer) GetMission(context.Context, *GetMissionRequest) (*Mission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (UnimplementedManageMissionServiceServer) CreateMission(context.Context, *Mission) (*Mission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (UnimplementedManageMissionServiceServer) UpdateMission(context.Context, *Mission) (*Mission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMission not implemented")
}
func (UnimplementedManageMissionServiceServer) DeleteMission(context.Context, *DeleteMissionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMission not implemented")
}
func (UnimplementedManageMissionServiceServer) mustEmbedUnimplementedManageMissionServiceServer() {}

// UnsafeManageMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageMissionServiceServer will
// result in compilation errors.
type UnsafeManageMissionServiceServer interface {
	mustEmbedUnimplementedManageMissionServiceServer()
}

func RegisterManageMissionServiceServer(s grpc.ServiceRegistrar, srv ManageMissionServiceServer) {
	s.RegisterService(&ManageMissionService_ServiceDesc, srv)
}

func _ManageMissionService_ListMissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageMissionServiceServer).ListMissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageMissionService/ListMissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageMissionServiceServer).ListMissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageMissionService_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageMissionServiceServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageMissionService/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageMissionServiceServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageMissionService_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageMissionServiceServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageMissionService/CreateMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageMissionServiceServer).CreateMission(ctx, req.(*Mission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageMissionService_UpdateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageMissionServiceServer).UpdateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageMissionService/UpdateMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageMissionServiceServer).UpdateMission(ctx, req.(*Mission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageMissionService_DeleteMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageMissionServiceServer).DeleteMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.ManageMissionService/DeleteMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageMissionServiceServer).DeleteMission(ctx, req.(*DeleteMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageMissionService_ServiceDesc is the grpc.ServiceDesc for ManageMissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageMissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.ManageMissionService",
	HandlerType: (*ManageMissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMissions",
			Handler:    _ManageMissionService_ListMissions_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _ManageMissionService_GetMission_Handler,
		},
		{
			MethodName: "CreateMission",
			Handler:    _ManageMissionService_CreateMission_Handler,
		},
		{
			MethodName: "UpdateMission",
			Handler:    _ManageMissionService_UpdateMission_Handler,
		},
		{
			MethodName: "DeleteMission",
			Handler:    _ManageMissionService_DeleteMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mission.proto",
}
