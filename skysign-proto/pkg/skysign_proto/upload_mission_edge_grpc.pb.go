// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package skysign_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadMissionEdgeServiceClient is the client API for UploadMissionEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadMissionEdgeServiceClient interface {
	GetUploadMission(ctx context.Context, in *GetUploadMissionRequest, opts ...grpc.CallOption) (*UploadMission, error)
}

type uploadMissionEdgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadMissionEdgeServiceClient(cc grpc.ClientConnInterface) UploadMissionEdgeServiceClient {
	return &uploadMissionEdgeServiceClient{cc}
}

func (c *uploadMissionEdgeServiceClient) GetUploadMission(ctx context.Context, in *GetUploadMissionRequest, opts ...grpc.CallOption) (*UploadMission, error) {
	out := new(UploadMission)
	err := c.cc.Invoke(ctx, "/skysign_proto.UploadMissionEdgeService/GetUploadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadMissionEdgeServiceServer is the server API for UploadMissionEdgeService service.
// All implementations must embed UnimplementedUploadMissionEdgeServiceServer
// for forward compatibility
type UploadMissionEdgeServiceServer interface {
	GetUploadMission(context.Context, *GetUploadMissionRequest) (*UploadMission, error)
	mustEmbedUnimplementedUploadMissionEdgeServiceServer()
}

// UnimplementedUploadMissionEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadMissionEdgeServiceServer struct {
}

func (UnimplementedUploadMissionEdgeServiceServer) GetUploadMission(context.Context, *GetUploadMissionRequest) (*UploadMission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadMission not implemented")
}
func (UnimplementedUploadMissionEdgeServiceServer) mustEmbedUnimplementedUploadMissionEdgeServiceServer() {
}

// UnsafeUploadMissionEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadMissionEdgeServiceServer will
// result in compilation errors.
type UnsafeUploadMissionEdgeServiceServer interface {
	mustEmbedUnimplementedUploadMissionEdgeServiceServer()
}

func RegisterUploadMissionEdgeServiceServer(s grpc.ServiceRegistrar, srv UploadMissionEdgeServiceServer) {
	s.RegisterService(&UploadMissionEdgeService_ServiceDesc, srv)
}

func _UploadMissionEdgeService_GetUploadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadMissionEdgeServiceServer).GetUploadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skysign_proto.UploadMissionEdgeService/GetUploadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadMissionEdgeServiceServer).GetUploadMission(ctx, req.(*GetUploadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadMissionEdgeService_ServiceDesc is the grpc.ServiceDesc for UploadMissionEdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadMissionEdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skysign_proto.UploadMissionEdgeService",
	HandlerType: (*UploadMissionEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUploadMission",
			Handler:    _UploadMissionEdgeService_GetUploadMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/upload_mission_edge.proto",
}
